#	Various useful scripted effects
#
#	By Rylock and Alpinia

# removes the country in scope from all wars (separately - it won't end the wars)
separate_peace_all_wars = {
	if = {
		limit = { has_war = yes }
		effect_tooltip = {
			every_enemy_country = {
				limit = { NOT = { civilwar_target = PREV } }
				white_peace = PREV
			}
		}
		hidden_effect = {
			# first peace out with faction leaders
			every_enemy_country = {
				limit = {
					is_faction_leader = yes
					NOT = { civilwar_target = PREV }
				}
				white_peace = PREV
			}

			# then all non-puppets whose faction leaders aren't in the war
			every_enemy_country = {
				limit = {
					is_subject = no
					is_in_faction = yes
					faction_leader = { NOT = { has_war_with = PREV.PREV } }
					NOT = { civilwar_target = PREV }
				}
				white_peace = PREV
			}

			# then all non-puppets who aren't in factions
			every_enemy_country = {
				limit = {
					is_subject = no
					is_in_faction = no
					NOT = { civilwar_target = PREV }
				}
				white_peace = PREV
			}

			# then all puppets whose overlords aren't in the war
			every_enemy_country = {
				limit = {
					is_subject = yes
					overlord = { NOT = { has_war_with = PREV.PREV } }
					NOT = { civilwar_target = PREV }
				}
				white_peace = PREV
			}
		}
	}
}

# ends puppet status, removes from faction and all current wars (used for rebellions)
clear_all_relations = {
	if = {
		limit = { is_subject = yes }
		overlord = {
			set_autonomy = {
				target = PREV
				autonomy_state = autonomy_free
			}
		}
	}
	if = {
		limit = { is_in_faction = yes }
		leave_faction = yes
	}
	separate_peace_all_wars = yes
	every_other_country = {
		limit = { has_guaranteed = PREV }
		diplomatic_relation = {
			country = PREV
			relation = guarantee
			active = no
		}
	}
	every_other_country = {
		limit = { has_non_aggression_pact_with = PREV }
		diplomatic_relation = {
			country = PREV
			relation = military_access
			active = no
		}
	}
	every_other_country = {
		limit = { has_military_access_to = PREV }
		diplomatic_relation = {
			country = PREV
			relation = military_access
			active = no
		}
	}
	every_other_country = {
		limit = { gives_military_access_to = PREV }
		PREV = {
			diplomatic_relation = {
				country = PREV
				relation = military_access
				active = no
			}
		}
	}
	CAN_remove_from_iedc = yes
	if = {
		limit = { is_in_tech_sharing_group = entente_research }
		remove_from_tech_sharing_group = entente_research
	}
	GER_remove_from_mitteleuropa = yes
	MIE_remove_from_intermarium = yes
	if = {
		limit = { is_in_tech_sharing_group = german_research }
		remove_from_tech_sharing_group = german_research
	}
	if = {
		limit = { is_in_tech_sharing_group = phalanstere_research }
		remove_from_tech_sharing_group = phalanstere_research
	}
	if = {
		limit = { is_in_tech_sharing_group = austrian_research }
		remove_from_tech_sharing_group = austrian_research
	}
}

# clears all relations with a specific country and its allies, does not end wars
# requires temp variable target = TAG
clear_all_relations_with_TARGET = {
	if = {
		limit = { var:target = { is_ally_with = ENT } }
		CAN_remove_from_iedc = yes
		if = {
			limit = { is_in_tech_sharing_group = entente_research }
			remove_from_tech_sharing_group = entente_research
		}
	}
	else_if = {
		limit = { var:target = { is_ally_with = GER } }
		GER_remove_from_mitteleuropa = yes
		MIE_remove_from_intermarium = yes
		if = {
			limit = { is_in_tech_sharing_group = german_research }
			remove_from_tech_sharing_group = german_research
		}
	}
	else_if = {
		limit = { var:target = { is_ally_with = INT } }
		if = {
			limit = { is_in_tech_sharing_group = phalanstere_research }
			remove_from_tech_sharing_group = phalanstere_research
		}
	}
	else_if = {
		limit = { var:target = { is_ally_with = AUS } }
		if = {
			limit = { is_in_tech_sharing_group = austrian_research }
			remove_from_tech_sharing_group = austrian_research
		}
	}
	if = {
		limit = { has_subject = var:target }
		set_autonomy = {
			target = PREV
			autonomy_state = autonomy_free
		}
	}
	else_if = {
		limit = { is_subject_of = var:target }
		overlord = {
			set_autonomy = {
				target = PREV
				autonomy_state = autonomy_free
			}
		}
	}
	if = {
		limit = { is_in_faction_with = var:target }
		leave_faction = yes
	}
	every_other_country = {
		limit = {
			has_guaranteed = PREV
			is_ally_with = var:target
		}
		diplomatic_relation = {
			country = PREV
			relation = guarantee
			active = no
		}
	}
	every_other_country = {
		limit = {
			has_non_aggression_pact_with = PREV
			is_ally_with = var:target
		}
		diplomatic_relation = {
			country = PREV
			relation = military_access
			active = no
		}
	}
	every_other_country = {
		limit = {
			has_military_access_to = PREV
			is_ally_with = var:target
		}
		diplomatic_relation = {
			country = PREV
			relation = military_access
			active = no
		}
	}
	every_other_country = {
		limit = {
			gives_military_access_to = PREV
			is_ally_with = var:target
		}
		PREV = {
			diplomatic_relation = {
				country = PREV
				relation = military_access
				active = no
			}
		}
	}
}

# ends puppet status, removes from faction and clears all relations except wars (used for rebellions)
clear_all_relations_except_wars = {
	if = {
		limit = { is_subject = yes }
		overlord = {
			set_autonomy = {
				target = PREV
				autonomy_state = autonomy_free
			}
		}
	}
	if = {
		limit = { is_in_faction = yes }
		leave_faction = yes
	}
	every_other_country = {
		limit = { has_guaranteed = PREV }
		diplomatic_relation = {
			country = PREV
			relation = guarantee
			active = no
		}
	}
	every_other_country = {
		limit = { has_non_aggression_pact_with = PREV }
		diplomatic_relation = {
			country = PREV
			relation = military_access
			active = no
		}
	}
	every_other_country = {
		limit = { has_military_access_to = PREV }
		PREV = {
			diplomatic_relation = {
				country = PREV
				relation = military_access
				active = no
			}
		}
	}
	every_other_country = {
		limit = { gives_military_access_to = PREV }
		diplomatic_relation = {
			country = PREV
			relation = military_access
			active = no
		}
	}
	CAN_remove_from_iedc = yes
	if = {
		limit = { is_in_tech_sharing_group = entente_research }
		remove_from_tech_sharing_group = entente_research
	}
	GER_remove_from_mitteleuropa = yes
	MIE_remove_from_intermarium = yes
	if = {
		limit = { is_in_tech_sharing_group = german_research }
		remove_from_tech_sharing_group = german_research
	}
	if = {
		limit = { is_in_tech_sharing_group = phalanstere_research }
		remove_from_tech_sharing_group = phalanstere_research
	}
}

# clears all relations with PREV (won't remove from faction if not a faction leader, nor stop wars if not a valid target)
clear_relations_with_PREV = {
	if = {
		limit = { has_subject = PREV }
		set_autonomy = {
			target = PREV
			autonomy_state = autonomy_free
		}
	}
	else_if = {
		limit = { is_subject_of = PREV }
		PREV = {
			set_autonomy = {
				target = PREV
				autonomy_state = autonomy_free
			}
		}
	}
	if = {
		limit = {
			is_in_faction_with = PREV
			OR = {
				is_faction_leader = yes
				PREV = { is_faction_leader = yes }
			}
		}
		leave_faction = yes
	}
	if = {
		limit = {
			has_war_with = PREV
			is_valid_peace_target = yes
			PREV = { is_valid_peace_target = yes }
		}
		PREV = { save_event_target_as = white_peace_receiver }
		white_peace_with_TARGET = yes
	}
	if = {
		limit = { has_guaranteed = PREV }
		diplomatic_relation = {
			country = PREV
			relation = guarantee
			active = no
		}
	}
	else_if = {
		limit = { is_guaranteed_by = PREV }
		PREV = {
			diplomatic_relation = {
				country = PREV
				relation = guarantee
				active = no
			}
		}
	}
	if = {
		limit = { has_non_aggression_pact_with = PREV }
		diplomatic_relation = {
			country = PREV
			relation = military_access
			active = no
		}
	}
	if = {
		limit = { has_military_access_to = PREV }
		PREV = {
			diplomatic_relation = {
				country = PREV
				relation = military_access
				active = no
			}
		}
	}
	if = {
		limit = { gives_military_access_to = PREV }
		diplomatic_relation = {
			country = PREV
			relation = military_access
			active = no
		}
	}
}

# forces a country to surrender (mechanically by lowering their surrender limit to 0%)
force_capitulate = {
	hidden_effect = {
		add_timed_idea = {
			idea = ready_to_surrender
			days = 15
		}
	}
}

# changes the government of the country in scope to that of ROOT (the country running the event)
copy_government_of_ROOT = {
	set_politics = { ruling_party = var:ROOT.current_party_ideology_group }
	hidden_effect = {
		set_popularities = {
			totalist = ROOT.party_popularity_100@totalist
			syndicalist = ROOT.party_popularity_100@syndicalist
			radical_socialist = ROOT.party_popularity_100@radical_socialist
			social_democrat = ROOT.party_popularity_100@social_democrat
			social_liberal = ROOT.party_popularity_100@social_liberal
			market_liberal = ROOT.party_popularity_100@market_liberal
			social_conservative = ROOT.party_popularity_100@social_conservative
			authoritarian_democrat = ROOT.party_popularity_100@authoritarian_democrat
			paternal_autocrat = ROOT.party_popularity_100@paternal_autocrat
			national_populist = ROOT.party_popularity_100@national_populist
		}
	}
}

# changes the government of the country in scope to that of PREV
copy_government_of_PREV = {
	set_politics = { ruling_party = var:PREV.current_party_ideology_group }
	hidden_effect = {
		set_popularities = {
			totalist = PREV.party_popularity_100@totalist
			syndicalist = PREV.party_popularity_100@syndicalist
			radical_socialist = PREV.party_popularity_100@radical_socialist
			social_democrat = PREV.party_popularity_100@social_democrat
			social_liberal = PREV.party_popularity_100@social_liberal
			market_liberal = PREV.party_popularity_100@market_liberal
			social_conservative = PREV.party_popularity_100@social_conservative
			authoritarian_democrat = PREV.party_popularity_100@authoritarian_democrat
			paternal_autocrat = PREV.party_popularity_100@paternal_autocrat
			national_populist = PREV.party_popularity_100@national_populist
		}
	}
}

# changes the popularites of the country in scope to that of ROOT (the country running the event)
copy_popularities_of_ROOT = {
	hidden_effect = {
		set_popularities = {
			totalist = ROOT.party_popularity_100@totalist
			syndicalist = ROOT.party_popularity_100@syndicalist
			radical_socialist = ROOT.party_popularity_100@radical_socialist
			social_democrat = ROOT.party_popularity_100@social_democrat
			social_liberal = ROOT.party_popularity_100@social_liberal
			market_liberal = ROOT.party_popularity_100@market_liberal
			social_conservative = ROOT.party_popularity_100@social_conservative
			authoritarian_democrat = ROOT.party_popularity_100@authoritarian_democrat
			paternal_autocrat = ROOT.party_popularity_100@paternal_autocrat
			national_populist = ROOT.party_popularity_100@national_populist
		}
	}
}

# changes the popularites of the country in scope to that of PREV (the country running the event)
copy_popularities_of_PREV = {
	hidden_effect = {
		set_popularities = {
			totalist = PREV.party_popularity_100@totalist
			syndicalist = PREV.party_popularity_100@syndicalist
			radical_socialist = PREV.party_popularity_100@radical_socialist
			social_democrat = PREV.party_popularity_100@social_democrat
			social_liberal = PREV.party_popularity_100@social_liberal
			market_liberal = PREV.party_popularity_100@market_liberal
			social_conservative = PREV.party_popularity_100@social_conservative
			authoritarian_democrat = PREV.party_popularity_100@authoritarian_democrat
			paternal_autocrat = PREV.party_popularity_100@paternal_autocrat
			national_populist = PREV.party_popularity_100@national_populist
		}
	}
}

# changes the laws of the country in scope to that of PREV (the country running the event)
copy_laws_of_PREV = {
	hidden_effect = {
		### Economy ###
		if = {
			limit = { PREV = { has_idea = undisturbed_isolation } }
			add_ideas = undisturbed_isolation
		}
		else_if = {
			limit = { PREV = { has_idea = isolation } }
			add_ideas = isolation
		}
		else_if = {
			limit = { PREV = { has_idea = civilian_economy } }
			add_ideas = civilian_economy
		}
		else_if = {
			limit = { PREV = { has_idea = low_economic_mobilisation } }
			add_ideas = low_economic_mobilisation
		}
		else_if = {
			limit = { PREV = { has_idea = partial_economic_mobilisation } }
			add_ideas = partial_economic_mobilisation
		}
		else_if = {
			limit = { PREV = { has_idea = war_economy } }
			add_ideas = war_economy
		}
		else_if = {
			limit = { PREV = { has_idea = tot_economic_mobilisation } }
			add_ideas = tot_economic_mobilisation
		}

		### Trade ###
		if = {
			limit = { PREV = { has_idea = command_economy } }
			add_ideas = command_economy
		}
		else_if = {
			limit = { PREV = { has_idea = uncontrolled_exports } }
			add_ideas = uncontrolled_exports
		}
		else_if = {
			limit = { PREV = { has_idea = free_trade } }
			add_ideas = free_trade
		}
		else_if = {
			limit = { PREV = { has_idea = export_focus } }
			add_ideas = export_focus
		}
		else_if = {
			limit = { PREV = { has_idea = limited_exports } }
			add_ideas = limited_exports
		}
		else_if = {
			limit = { PREV = { has_idea = closed_economy } }
			add_ideas = closed_economy
		}

		### Mobilisation ###
		if = {
			limit = { PREV = { has_idea = disarmed_nation } }
			add_ideas = disarmed_nation
		}
		else_if = {
			limit = { PREV = { has_idea = volunteer_only } }
			add_ideas = volunteer_only
		}
		else_if = {
			limit = { PREV = { has_idea = limited_conscription } }
			add_ideas = limited_conscription
		}
		else_if = {
			limit = { PREV = { has_idea = extensive_conscription } }
			add_ideas = extensive_conscription
		}
		else_if = {
			limit = { PREV = { has_idea = service_by_requirement } }
			add_ideas = service_by_requirement
		}
		else_if = {
			limit = { PREV = { has_idea = all_adults_serve } }
			add_ideas = all_adults_serve
		}
		else_if = {
			limit = { PREV = { has_idea = scraping_the_barrel } }
			add_ideas = scraping_the_barrel
		}
	}
}

# the following effects are excellent for preserving a puppet's government so it doesn't change to the overlord
# use the first command in the scope of the about-to-be-puppeted country right before the puppet command is executed
# and then the second, also in the scope of the puppet, right after
get_current_government_type = {
	clear_variable = original_government_type
	set_variable = { original_government_type = current_party_ideology_group }

	if = {
		limit = { has_elections = yes }
		set_country_flag = original_government_type_had_elections
	}

	clear_array = original_popularities
	add_to_array = { original_popularities = party_popularity_100@totalist }
	add_to_array = { original_popularities = party_popularity_100@syndicalist }
	add_to_array = { original_popularities = party_popularity_100@radical_socialist }
	add_to_array = { original_popularities = party_popularity_100@social_democrat }
	add_to_array = { original_popularities = party_popularity_100@social_liberal }
	add_to_array = { original_popularities = party_popularity_100@market_liberal }
	add_to_array = { original_popularities = party_popularity_100@social_conservative }
	add_to_array = { original_popularities = party_popularity_100@authoritarian_democrat }
	add_to_array = { original_popularities = party_popularity_100@paternal_autocrat }

	set_temp_variable = { sum = 100 }
	for_each_loop = {
		array = original_popularities
		subtract_from_temp_variable = { sum = v }
	}
	add_to_array = { original_popularities = sum } #last value (natpop), calculated directly to avoid rounding errors

	if = {
		limit = { has_coalition = yes }
		for_each_loop = {
			array = coalition_partners
			add_to_array = { original_coalitions = v }
		}
	}
}

restore_previous_government_type = {
	hidden_effect = {
		if = {
			limit = { has_variable = original_government_type } #needed to avoid a CTD
			if = {
				limit = { has_country_flag = original_government_type_had_elections }
				clr_country_flag = original_government_type_had_elections
				set_politics = {
					ruling_party = var:original_government_type
					elections_allowed = yes
				}
			}
			else = {
				set_politics = {
					ruling_party = var:original_government_type
					elections_allowed = no
				}
			}
		}
		clear_variable = original_government_type

		if = {
			limit = { check_variable = { original_popularities^num > 0 } }
			set_popularities = {
				totalist = original_popularities^0
				syndicalist = original_popularities^1
				radical_socialist = original_popularities^2
				social_democrat = original_popularities^3
				social_liberal = original_popularities^4
				market_liberal = original_popularities^5
				social_conservative = original_popularities^6
				authoritarian_democrat = original_popularities^7
				paternal_autocrat = original_popularities^8
				national_populist = original_popularities^9
			}
			clear_array = original_popularities
		}

		if = {
			limit = { check_variable = { original_coalitions^num > 0 } }
			for_each_loop = {
				array = original_coalitions
				set_temp_variable = { coalition_partner_var = v }
				add_to_coalition = yes
			}
			clear_array = original_coalitions
		}
	}
}

embargo_ROOT = {
	if = {
		limit = {
			NOT = { has_country_flag = embargoed_@ROOT }
		}
		set_country_flag = embargoed_@ROOT
		ROOT = { set_country_flag = embargoed_@PREV }
		add_opinion_modifier = {
			modifier = embargo
			target = ROOT
		}
		reverse_add_opinion_modifier = {
			modifier = embargo
			target = ROOT
		}
	}
}

clear_embargo_ROOT = {
	if = {
		limit = { has_country_flag = embargoed_@ROOT }
		clr_country_flag = embargoed_@ROOT
		remove_opinion_modifier = {
			modifier = embargo
			target = ROOT
		}
		ROOT = {
			clr_country_flag = embargoed_@PREV
			remove_opinion_modifier = {
				modifier = embargo
				target = PREV
			}
		}
	}
}

embargo_PREV = {
	if = {
		limit = {
			NOT = { has_country_flag = embargoed_@PREV }
		}
		set_country_flag = embargoed_@PREV
		PREV = { set_country_flag = embargoed_@PREV }
		add_opinion_modifier = {
			modifier = embargo
			target = PREV
		}
		reverse_add_opinion_modifier = {
			modifier = embargo
			target = PREV
		}
	}
}

clear_embargo_PREV = {
	if = {
		limit = { has_country_flag = embargoed_@PREV }
		clr_country_flag = embargoed_@PREV
		remove_opinion_modifier = {
			modifier = embargo
			target = PREV
		}
		PREV = {
			clr_country_flag = embargoed_@PREV
			remove_opinion_modifier = {
				modifier = embargo
				target = PREV
			}
		}
	}
}

embargo_FROM = {
	if = {
		limit = {
			NOT = { has_country_flag = embargoed_@FROM }
		}
		set_country_flag = embargoed_@FROM
		FROM = { set_country_flag = embargoed_@PREV }
		add_opinion_modifier = {
			modifier = embargo
			target = FROM
		}
		reverse_add_opinion_modifier = {
			modifier = embargo
			target = FROM
		}
	}
}

clear_embargo_FROM = {
	if = {
		limit = { has_country_flag = embargoed_@FROM }
		clr_country_flag = embargoed_@FROM
		remove_opinion_modifier = {
			modifier = embargo
			target = FROM
		}
		FROM = {
			clr_country_flag = embargoed_@PREV
			remove_opinion_modifier = {
				modifier = embargo
				target = PREV
			}
		}
	}
}

remove_all_AI_templates = {
	hidden_effect = {
		for_loop_effect = {
			start = 1
			end = 20
			compare = less_than_or_equals

			meta_effect = {
				text = {
					if = {
						limit = { has_template = "Infantry template [COUNT]" }
						delete_unit_template_and_units = { division_template = "Infantry template [COUNT]" }
					}
					if = {
						limit = { has_template = "Light Tank template [COUNT]" }
						delete_unit_template_and_units = { division_template = "Light Tank template [COUNT]" }
					}
					if = {
						limit = { has_template = "Medium Tank template [COUNT]" }
						delete_unit_template_and_units = { division_template = "Medium Tank template [COUNT]" }
					}
					if = {
						limit = { has_template = "Modern Tank template [COUNT]" }
						delete_unit_template_and_units = { division_template = "Modern Tank template [COUNT]" }
					}
					if = {
						limit = { has_template = "Marines template [COUNT]" }
						delete_unit_template_and_units = { division_template = "Marines template [COUNT]" }
					}
					if = {
						limit = { has_template = "Mountaineers template [COUNT]" }
						delete_unit_template_and_units = { division_template = "Mountaineers template [COUNT]" }
					}
				}
				COUNT = "[?v]"
			}
		}
	}
}

destroy_all_ships = {
	destroy_ships = {
		type = ship_hull_light
		count = all
	}
	destroy_ships = {
		type = ship_hull_cruiser
		count = all
	}
	destroy_ships = {
		type = ship_hull_cruiser_panzerschiff
		count = all
	}
	destroy_ships = {
		type = ship_hull_cruiser_coastal_defense_ship
		count = all
	}
	destroy_ships = {
		type = ship_hull_pre_dreadnought
		count = all
	}
	destroy_ships = {
		type = ship_hull_heavy
		count = all
	}
	destroy_ships = {
		type = ship_hull_super_heavy_1
		count = all
	}
	destroy_ships = {
		type = ship_hull_submarine
		count = all
	}
	destroy_ships = {
		type = ship_hull_cruiser_submarine
		count = all
	}
	destroy_ships = {
		type = ship_hull_carrier
		count = all
	}
	destroy_ships = {
		type = ship_hull_carrier_conversion_bb
		count = all
	}
	destroy_ships = {
		type = ship_hull_carrier_conversion_ca
		count = all
	}
}

# use in a state scope
# has no effect for megalopoleis, enclaves, islands or wastelands
increase_state_category_by_one_level = {
	if = {
		limit = { has_state_category = one }
		set_state_category = two
	}
	else_if = {
		limit = { has_state_category = two }
		set_state_category = three
	}
	else_if = {
		limit = { has_state_category = three }
		set_state_category = four
	}
	else_if = {
		limit = { has_state_category = four }
		set_state_category = five
	}
	else_if = {
		limit = { has_state_category = five }
		set_state_category = six
	}
	else_if = {
		limit = { has_state_category = six }
		set_state_category = seven
	}
	else_if = {
		limit = { has_state_category = seven }
		set_state_category = eight
	}
	else_if = {
		limit = { has_state_category = eight }
		set_state_category = nine
	}
	else_if = {
		limit = { has_state_category = nine }
		set_state_category = ten
	}
	else_if = {
		limit = { has_state_category = ten }
		set_state_category = eleven
	}
	else_if = {
		limit = { has_state_category = eleven }
		set_state_category = twelve
	}
	else = { add_extra_state_shared_building_slots = 1 }
	custom_effect_tooltip = increase_state_category_by_one_level_tt
}
increase_state_category_by_two_levels = {
	if = {
		limit = { has_state_category = one }
		set_state_category = three
	}
	else_if = {
		limit = { has_state_category = two }
		set_state_category = four
	}
	else_if = {
		limit = { has_state_category = three }
		set_state_category = five
	}
	else_if = {
		limit = { has_state_category = four }
		set_state_category = six
	}
	else_if = {
		limit = { has_state_category = five }
		set_state_category = seven
	}
	else_if = {
		limit = { has_state_category = six }
		set_state_category = eight
	}
	else_if = {
		limit = { has_state_category = seven }
		set_state_category = nine
	}
	else_if = {
		limit = { has_state_category = eight }
		set_state_category = ten
	}
	else_if = {
		limit = { has_state_category = nine }
		set_state_category = eleven
	}
	else_if = {
		limit = { has_state_category = ten }
		set_state_category = twelve
	}
	else_if = {
		limit = { has_state_category = eleven }
		set_state_category = twelve
		add_extra_state_shared_building_slots = 1
	}
	else = { add_extra_state_shared_building_slots = 2 }
	custom_effect_tooltip = increase_state_category_by_two_levels_tt
}
decrease_state_category_by_one_level = {
	if = {
		limit = { has_state_category = twelve }
		set_state_category = eleven
	}
	else_if = {
		limit = { has_state_category = eleven }
		set_state_category = ten
	}
	else_if = {
		limit = { has_state_category = ten }
		set_state_category = nine
	}
	else_if = {
		limit = { has_state_category = nine }
		set_state_category = eight
	}
	else_if = {
		limit = { has_state_category = eight }
		set_state_category = seven
	}
	else_if = {
		limit = { has_state_category = seven }
		set_state_category = six
	}
	else_if = {
		limit = { has_state_category = six }
		set_state_category = five
	}
	else_if = {
		limit = { has_state_category = five }
		set_state_category = four
	}
	else_if = {
		limit = { has_state_category = four }
		set_state_category = three
	}
	else_if = {
		limit = { has_state_category = three }
		set_state_category = two
	}
	else_if = {
		limit = { has_state_category = two }
		set_state_category = one
	}
	custom_effect_tooltip = decrease_state_category_by_one_level_tt
}

### adds research slots until three, then gives a temporary research speed bonus
add_research_slot_until_three = {
	if = {
		limit = { amount_research_slots < 3 }
		add_research_slot = 1
	}
	else_if = {
		limit = { has_idea = generic_research_advances }
		modify_timed_idea = {
			idea = generic_research_advances
			days = 730
		}
	}
	else = {
		add_timed_idea = {
			idea = generic_research_advances
			days = 730
		}
	}
}

### adds research slots until four, then gives a temporary research speed bonus
add_research_slot_until_four = {
	if = {
		limit = { amount_research_slots < 4 }
		add_research_slot = 1
	}
	else_if = {
		limit = { has_idea = generic_research_advances }
		modify_timed_idea = {
			idea = generic_research_advances
			days = 730
		}
	}
	else = {
		add_timed_idea = {
			idea = generic_research_advances
			days = 730
		}
	}
}

### adds research slots until five, then gives a temporary research speed bonus
add_research_slot_until_five = {
	if = {
		limit = { amount_research_slots < 5 }
		add_research_slot = 1
	}
	else_if = {
		limit = { has_idea = generic_research_advances }
		modify_timed_idea = {
			idea = generic_research_advances
			days = 730
		}
	}
	else = {
		add_timed_idea = {
			idea = generic_research_advances
			days = 730
		}
	}
}

### adds research slots until six, then gives a temporary research speed bonus
add_research_slot_until_six = {
	if = {
		limit = { amount_research_slots < 6 }
		add_research_slot = 1
	}
	else_if = {
		limit = { has_idea = generic_research_advances }
		modify_timed_idea = {
			idea = generic_research_advances
			days = 730
		}
	}
	else = {
		add_timed_idea = {
			idea = generic_research_advances
			days = 730
		}
	}
}

# used for restoring factories lost when states are transferred to a new owners
# example of use:
#	every_owned_state = {
#		limit = { is_core_of = TAG }
#		save_current_factory_count = yes
#		transfer_state_to = TAG
#		restore_previous_factory_count = yes
# 	}

save_current_factory_count = {
	hidden_effect = {
		if = {
			limit = { industrial_complex > 0 }
			set_variable = { previous_industrial_complex_count = building_level@industrial_complex }
		}
		if = {
			limit = { arms_factory > 0 }
			set_variable = { previous_arms_factory_count = building_level@arms_factory }
		}
		if = {
			limit = { dockyard > 0 }
			set_variable = { previous_dockyard_count = building_level@dockyard }
		}
		if = {
			limit = { synthetic_refinery > 0 }
			set_variable = { previous_synthetic_refinery_count = building_level@synthetic_refinery }
		}
		if = {
			limit = { fuel_silo > 0 }
			set_variable = { previous_fuel_silo_count = building_level@fuel_silo }
		}
		if = {
			limit = { rocket_site > 0 }
			set_variable = { previous_rocket_site_count = building_level@rocket_site }
		}
		if = {
			limit = { nuclear_reactor > 0 }
			set_variable = { previous_nuclear_reactor_count = building_level@nuclear_reactor }
		}
	}
}

restore_previous_factory_count = {
	hidden_effect = {
		if = {
			limit = { has_variable = previous_industrial_complex_count }
			subtract_from_variable = { previous_industrial_complex_count = building_level@industrial_complex }
			if = {
				limit = { check_variable = { previous_industrial_complex_count > 0 } }
				add_building_construction = { type = industrial_complex level = previous_industrial_complex_count instant_build = yes }
			}
			clear_variable = previous_industrial_complex_count
		}
		if = {
			limit = { has_variable = previous_arms_factory_count }
			subtract_from_variable = { previous_arms_factory_count = building_level@arms_factory }
			if = {
				limit = { check_variable = { previous_arms_factory_count > 0 } }
				add_building_construction = { type = arms_factory level = previous_arms_factory_count instant_build = yes }
			}
			clear_variable = previous_arms_factory_count
		}
		if = {
			limit = { has_variable = previous_dockyard_count }
			subtract_from_variable = { previous_dockyard_count = building_level@dockyard }
			if = {
				limit = { check_variable = { previous_dockyard_count > 0 } }
				add_building_construction = { type = dockyard level = previous_dockyard_count instant_build = yes }
			}
			clear_variable = previous_dockyard_count
		}
		if = {
			limit = { has_variable = previous_synthetic_refinery_count }
			subtract_from_variable = { previous_synthetic_refinery_count = building_level@synthetic_refinery }
			if = {
				limit = { check_variable = { previous_synthetic_refinery_count > 0 } }
				add_building_construction = { type = synthetic_refinery level = previous_synthetic_refinery_count instant_build = yes }
			}
			clear_variable = previous_synthetic_refinery_count
		}
		if = {
			limit = { has_variable = previous_fuel_silo_count }
			subtract_from_variable = { previous_fuel_silo_count = building_level@fuel_silo }
			if = {
				limit = { check_variable = { previous_fuel_silo_count > 0 } }
				add_building_construction = { type = fuel_silo level = previous_fuel_silo_count instant_build = yes }
			}
			clear_variable = previous_fuel_silo_count
		}
		if = {
			limit = { has_variable = previous_rocket_site_count }
			subtract_from_variable = { previous_rocket_site_count = building_level@rocket_site }
			if = {
				limit = { check_variable = { previous_rocket_site_count > 0 } }
				add_building_construction = { type = rocket_site level = previous_rocket_site_count instant_build = yes }
			}
			clear_variable = previous_rocket_site_count
		}
		if = {
			limit = { has_variable = previous_nuclear_reactor_count }
			subtract_from_variable = { previous_nuclear_reactor_count = building_level@nuclear_reactor }
			if = {
				limit = { check_variable = { previous_nuclear_reactor_count > 0 } }
				add_building_construction = { type = nuclear_reactor level = previous_nuclear_reactor_count instant_build = yes }
			}
			clear_variable = previous_nuclear_reactor_count
		}
	}
}

# used for transferring states that are partially occupied by an enemy without breaking frontlines
# use in state scope
# requires a temp_variable target
transfer_state_during_war = {
	if = {
		limit = { is_fully_controlled_by = owner }
		transfer_state_to = var:target
	}
	else = {
		set_state_owner_to = var:target
		set_state_province_controller = {
			controller = owner
			limit = { NOT = { has_war_with = PREV.owner } }
		}
	}
}

# used for transferring control of states between allies without breaking frontlines
# use in state scope
# requires a temp_variable target
transfer_control_during_war = {
	if = {
		limit = { is_fully_controlled_by = controller }
		set_state_controller = var:target
	}
	else = {
		set_state_province_controller = {
			controller = var:target
			limit = { is_ally_with = PREV.controller }
		}
	}
}

#Gives a random agency upgrade or grants a free agency if one has not yet been established
gain_random_agency_upgrade = {
	custom_effect_tooltip = free_agency_upgrade_tt
	hidden_effect = {
		if = {
			limit = {
				has_intelligence_agency = no
			}
			create_intelligence_agency = yes
		}
		else = {
			random_list = {
				1 = {
					upgrade_intelligence_agency = upgrade_economy_civilian
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_economy_civilian
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_army_department
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_army_department
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_naval_department
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_naval_department
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_airforce_department
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_airforce_department
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_passive_defense
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_passive_defense
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_anti_partisan
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_anti_partisan
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_blueprint_stealing
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_blueprint_stealing
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_portable_radios
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_portable_radios
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_invisible_ink
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_invisible_ink
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_plastic_explosives
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_plastic_explosives
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_suicide_pills
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_suicide_pills
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_training_centers
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_training_centers
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_commando_training
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_commando_training
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_interrogation_techniques
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_interrogation_techniques
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_diplo_training
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_diplo_training
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_psycho_warfare
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_psycho_warfare
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_form_department
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_form_department
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_decryption_boost
					modifier = {
						factor = 0
						OR = {
							has_done_agency_upgrade = upgrade_decryption_boost
							NOT = { has_done_agency_upgrade = upgrade_form_department }
						}
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_decryption_boost_2
					modifier = {
						factor = 0
						OR = {
							has_done_agency_upgrade = upgrade_decryption_boost_2
							NOT = { has_done_agency_upgrade = upgrade_form_department }
							NOT = { has_done_agency_upgrade = upgrade_decryption_boost }
						}
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_crypto_strength
					modifier = {
						factor = 0
						OR = {
							has_done_agency_upgrade = upgrade_crypto_strength
							NOT = { has_done_agency_upgrade = upgrade_form_department }
						}
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_crypto_strength_2
					modifier = {
						factor = 0
						OR = {
							has_done_agency_upgrade = upgrade_crypto_strength_2
							NOT = { has_done_agency_upgrade = upgrade_form_department }
							NOT = { has_done_agency_upgrade = upgrade_crypto_strength }
						}
					}
				}
			}
		}
	}
}

#this needs to be called *before* every start_civil_war effect
civil_war_set_flag_to_restore_elections = {
	if = {
		limit = { has_elections = yes }
		set_country_flag = had_elections
	}
}

log_RP_eastern_military = {
	set_variable = { GER.ee_divcount = 0 }
	set_variable = { GER.ee_divlimit = 0 }
	set_variable = { GER.ee_armysize = 0 }
	every_country = {
		limit = {
			is_in_faction_with = GER
			OR = {
				tag = POL
				tag = LIT
				tag = BAT
				tag = LAT
				tag = EST
				tag = UKR
				tag = GEO
				tag = FIN
				tag = AZR
				tag = WHR
			}
		}
		add_to_variable = {
			var = GER.ee_divcount
			value = num_divisions
		}
		add_to_variable = {
			var = GER.ee_divlimit
			value = max_divisions
		}
	}
	log = "KR_Unit;[GetDateText];Reichspakt East;[?GER.ee_divcount];[?GER.ee_divlimit]"
}

# scope is the country being freed
remove_puppet_and_leave_faction = {
	if = {
		limit = { is_in_faction = yes }
		leave_faction = yes
	}
	if = {
		limit = { is_subject = yes }
		overlord = {
			set_autonomy = {
				target = PREV
				autonomy_state = autonomy_free
			}
		}
	}
}

incoming_war_notification_effect = {
	hidden_effect = { country_event = generic_events.30 } #warning event
}

calculate_days_since_game_start = {
	add_to_temp_variable = { days_to_event = 706640 }
	subtract_from_temp_variable = { days_to_event = global.num_days }
}

# Starts at Wednesday, since Jan 1, 1936 (Day 0) is a Wednesday
day_of_week_flag = {
	if = {
		limit = { check_variable = { increment = 0 } }
		set_country_flag = day_is_Wednesday
	}
	else_if = {
		limit = { check_variable = { increment = 1 } }
		set_country_flag = day_is_Thursday
	}
	else_if = {
		limit = { check_variable = { increment = 2 } }
		set_country_flag = day_is_Friday
	}
	else_if = {
		limit = { check_variable = { increment = 3 } }
		set_country_flag = day_is_Saturday
	}
	else_if = {
		limit = { check_variable = { increment = 4 } }
		set_country_flag = day_is_Sunday
	}
	else_if = {
		limit = { check_variable = { increment = 5 } }
		set_country_flag = day_is_Monday
	}
	else_if = {
		limit = { check_variable = { increment = 6 } }
		set_country_flag = day_is_Tuesday
	}
}

leap_year_check = {
	# Set a temporary variable to check how many leap years have passed
	set_temp_variable = { days_passed_leap_check = days_passed }
	subtract_from_temp_variable = { days_passed_leap_check = 58 } #subtract the 58 days of 1936 until the first leap year
	if = {
		limit = { check_variable = { days_passed_leap_check > 0 } } #if that turns the value negative, no leap years have occurred, so skip ahead
		# But if the number of days is still positive, subtract 4 years of days (365x4), and increment the days_passed variable to account for the missing leap day that hoi4 doesn't add
		# if the number of days is now negative, there are no more missing leap days, and the while loop breaks out, otherwise it keeps going until all the missing leap days are accounted for
		while_loop_effect = {
			limit = { check_variable = { days_passed_leap_check > 0 } }
			subtract_from_temp_variable = { days_passed_leap_check = 1460 }
			add_to_temp_variable = { days_passed = 1 }
		}
	}
}

clear_week_flags = {
	clr_country_flag = day_is_Wednesday
	clr_country_flag = day_is_Thursday
	clr_country_flag = day_is_Friday
	clr_country_flag = day_is_Saturday
	clr_country_flag = day_is_Sunday
	clr_country_flag = day_is_Monday
	clr_country_flag = day_is_Tuesday
}

# modulo math divides the given variable by the value you choose and then converts that variable into the remainder.
# so a value of 10 for date_check would become 3 after the modulo_temp_variable for example.
modulo_date_check = {
	modulo_temp_variable = { date_check = 7 } #divide the date by 7, and change the variable to the remainder
	if = {
		limit = { check_variable = { date_check = 0 } } #If the remainder is 0, then that is the current day of the week
		day_of_week_flag = yes
	}
	else = {
		set_temp_variable = { date_check = days_passed } #check the current date
		add_to_temp_variable = { date_check = 7 } # add one week to avoid negative numbers when subtracting the increment
		add_to_temp_variable = { increment = 1 } #increment the day of the week by 1
		subtract_from_temp_variable = { date_check = increment } #increment the date by the date_increment
	}
}

# Usage Guide #
# Fire a hidden event that runs the 'get_day_of_week' scripted effect which sets one of the country_flags
# then, fire event namespace.XXX for your tag and use the scripted localisation [GetDayOfWeek] to dynamically grab the day of the week
# next, have the aforementioned event namespace.XXX run the "clear_week_flags" scripted effect, to clear out the country flag and reset the command to be used again.

get_day_of_week = {
	# Determine how many days have passed since Wednesday Jan 1, 1936
	set_temp_variable = { days_passed = global.num_days }
	subtract_from_temp_variable = { days_passed = 706640 } #number of days to get to Jan 1, 1936
	leap_year_check = yes #check how many leap years have passed and adjust the date accordingly

	set_temp_variable = { date_check = days_passed } #check the current date
	set_temp_variable = { increment = 0 } #define the increment variable to be used when checking what day of the week it is

	while_loop_effect = { #run the modulo_date_check scripted_effect until it returns true
		limit = { NOT = { check_variable = { date_check = 0 } } } #if the remainder went to 0, the day of the week was found, so break the loop
		modulo_date_check = yes
	}
}

ask_to_join_faction = {
	country_event = generic_events.10
}

invite_country_to_faction = {
	country_event = { id = generic_events.18 hours = 4 random_hours = 4 }
}

