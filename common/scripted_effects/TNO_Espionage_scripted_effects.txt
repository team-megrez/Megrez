
#  ________   ______   _______   ______   ______   __    __   ______    ______   ________        __       __   ______    ______            _____   ______   __       __  ________   ______         _______    ______   __    __  _______  
#  /        | /      \ /       \ /      | /      \ /  \  /  | /      \  /      \ /        |      /  |  _  /  | /      \  /      \          /     | /      \ /  \     /  |/        | /      \       /       \  /      \ /  \  /  |/       \ 
#  $$$$$$$$/ /$$$$$$  |$$$$$$$  |$$$$$$/ /$$$$$$  |$$  \ $$ |/$$$$$$  |/$$$$$$  |$$$$$$$$/       $$ | / \ $$ |/$$$$$$  |/$$$$$$  |         $$$$$ |/$$$$$$  |$$  \   /$$ |$$$$$$$$/ /$$$$$$  |      $$$$$$$  |/$$$$$$  |$$  \ $$ |$$$$$$$  |
#  $$ |__    $$ \__$$/ $$ |__$$ |  $$ |  $$ |  $$ |$$$  \$$ |$$ |__$$ |$$ | _$$/ $$ |__          $$ |/$  \$$ |$$ |  $$ |$$ |  $$ |            $$ |$$ |__$$ |$$$  \ /$$$ |$$ |__    $$ \__$$/       $$ |__$$ |$$ |  $$ |$$$  \$$ |$$ |  $$ |
#  $$    |   $$      \ $$    $$/   $$ |  $$ |  $$ |$$$$  $$ |$$    $$ |$$ |/    |$$    |         $$ /$$$  $$ |$$ |  $$ |$$ |  $$ |       __   $$ |$$    $$ |$$$$  /$$$$ |$$    |   $$      \       $$    $$< $$ |  $$ |$$$$  $$ |$$ |  $$ |
#  $$$$$/     $$$$$$  |$$$$$$$/    $$ |  $$ |  $$ |$$ $$ $$ |$$$$$$$$ |$$ |$$$$ |$$$$$/          $$ $$/$$ $$ |$$ |  $$ |$$ |  $$ |      /  |  $$ |$$$$$$$$ |$$ $$ $$/$$ |$$$$$/     $$$$$$  |      $$$$$$$  |$$ |  $$ |$$ $$ $$ |$$ |  $$ |
#  $$ |_____ /  \__$$ |$$ |       _$$ |_ $$ \__$$ |$$ |$$$$ |$$ |  $$ |$$ \__$$ |$$ |_____       $$$$/  $$$$ |$$ \__$$ |$$ \__$$ |      $$ \__$$ |$$ |  $$ |$$ |$$$/ $$ |$$ |_____ /  \__$$ |      $$ |__$$ |$$ \__$$ |$$ |$$$$ |$$ |__$$ |
#  $$       |$$    $$/ $$ |      / $$   |$$    $$/ $$ | $$$ |$$ |  $$ |$$    $$/ $$       |      $$$/    $$$ |$$    $$/ $$    $$/       $$    $$/ $$ |  $$ |$$ | $/  $$ |$$       |$$    $$/       $$    $$/ $$    $$/ $$ | $$$ |$$    $$/ 
#  $$$$$$$$/  $$$$$$/  $$/       $$$$$$/  $$$$$$/  $$/   $$/ $$/   $$/  $$$$$$/  $$$$$$$$/       $$/      $$/  $$$$$$/   $$$$$$/         $$$$$$/  $$/   $$/ $$/      $$/ $$$$$$$$/  $$$$$$/        $$$$$$$/   $$$$$$/  $$/   $$/ $$$$$$$/  

#By Reich & OFN teams


# This system is designed to make it easy for other regional agencies to hook in by unifying a number of variables and scripted effects. All steps will be explained.


##################
# Initialization #
##################

# Every nation gets its own intel variables. ENCRYPTION is a measure of how strong a region's defenses against the specific intel agency are: the larger the number is, the unlikelier it becomes for the
# agency to succesfully accomplish its mission in the region. 

# DECRYPTION is a measure of how effective the intel agency's efforts as a whole are. Therefore, any intel agency will want to raise its own decryption capabilities by, for example, researching intel technologies.

ESPIONAGE_initialize_variables = {	#Put the scripted effect for creating the intel agency vars in here, scoped to the appropriate nation.

	USA = { ESPIONAGE_set_USA_variables = yes }

	GER = { ESPIONAGE_set_GER_variables = yes }

}

# Since all of these variables are generated for the appropriate tag rather than globally, you must access them like

# USA.USA_Regional_Encryption^1

# to get the CIA variable for Europe as any tag other than USA.

ESPIONAGE_set_USA_variables = {

	add_to_array = { USA_Regional_Encryption = 5 }	#0 - Africa
	add_to_array = { USA_Regional_Encryption = 15 }	#1 - Europe
	add_to_array = { USA_Regional_Encryption = 7 }	#2 - Oceania
	add_to_array = { USA_Regional_Encryption = 11 }	#3 - Eastern Asia
	add_to_array = { USA_Regional_Encryption = 9 }	#4 - Middle East
	add_to_array = { USA_Regional_Encryption = 5 }	#5 - Central America
	add_to_array = { USA_Regional_Encryption = 6 }	#6 - South America
	add_to_array = { USA_Regional_Encryption = 3 }	#7 - North America
	add_to_array = { USA_Regional_Encryption = 9 }	#8 - South East Asia
	add_to_array = { USA_Regional_Encryption = 0 }	#9 - Russia PLACEHOLDER!


	# set_variable = { USA_CIA_Africa_Encryption = 5 }
	# set_variable = { USA_CIA_Europe_Encryption = 15 }
	# set_variable = { USA_CIA_Oceania_Encryption = 7 }
	# set_variable = { USA_CIA_East_Asian_Encryption = 11 }
	# set_variable = { USA_CIA_Middle_East_Encryption = 9 }
	# set_variable = { USA_CIA_Central_America_Encryption = 5 }
	# set_variable = { USA_CIA_South_America_Encryption = 6 }
	# set_variable = { USA_CIA_North_America_Encryption = 3 }
	# set_variable = { USA_CIA_South_East_Asia_Encryption = 9 }
	# set_variable = { USA_CIA_Russia_Russia_Encryption = 0 }

	set_variable = { USA_CIA_Decryption = 6 }
}

ESPIONAGE_set_GER_variables = {

	add_to_array = { GER_Regional_Encryption = 7 }	#0 - Africa
	add_to_array = { GER_Regional_Encryption = 8 }	#1 - Europe
	add_to_array = { GER_Regional_Encryption = 16 }	#2 - Oceania
	add_to_array = { GER_Regional_Encryption = 12 }	#3 - Eastern Asia
	add_to_array = { GER_Regional_Encryption = 7 }	#4 - Middle East
	add_to_array = { GER_Regional_Encryption = 14 }	#5 - Central America
	add_to_array = { GER_Regional_Encryption = 12 }	#6 - South America
	add_to_array = { GER_Regional_Encryption = 10 }	#7 - North America
	add_to_array = { GER_Regional_Encryption = 12 }	#8 - South East Asia
	add_to_array = { GER_Regional_Encryption = 5 }	#9 - Russia

	set_variable = { GER_Decryption = 5 }

	# Mission Success and Mission Failure arrays utilize the same indexes and as the Encryption arrays
	# Be sure to point to the correct index when coding regional missions
	add_to_array = { GER_Mission_Success = 0 }
	resize_array = { GER_Mission_Success = 10 }

	add_to_array = { GER_Mission_Failure = 0 }
	resize_array = { GER_Mission_Failure = 10 }
}

##########################
# Codeworks to Hook Into #
##########################

# These commands use the following two arguments as variables:

# val_SPY - the value by which you want to change the array entry/entries. Can be negative or positive

# i_SPY - the index you want to specify, necessary if you want to affect only one region. Must be an integer in the range of 0 to 9.

# To use the scripted effect with values outside of the ones in the generic scripted commands section, simply specify the above variables as you want and then run the encryption_global_loop.

ESPIONAGE_GER_encryption_global_loop = {

	set_variable = { val_SPY_loc = val_SPY }									#We set the variable val_SPY_loc for loc display purposes.

	log = "ESPIONAGE_GER_encryption_global_loop: val_SPY [?val_SPY] val_SPY_loc [?val_SPY_loc]"

	if = {
		limit = {
			has_variable = i_SPY												#We check if the variable i_SPY exists, i.e if a region has been specified.
		}

		set_variable = { i_SPY_loc = i_SPY }									#We set i_SPY_loc for loc display purposes.

		custom_effect_tooltip = ESPIONAGE_GER_encryption_global_loop_tt

		GER = {
			add_to_variable = { GER_Regional_Encryption^PREV.i_SPY = PREV.val_SPY }		#If it has, then we simply use i_SPY as the index of the agency's array and add val_SPY (which can be positive or negative).

			ESPIONAGE_encryption_clamper = yes									#We run the encryption clamper.
		}
		else = {
			GER = {
				for_each_loop = {												#If no region has been specified, we run a loop through the entire array, affecting every region.
					array = GER_Regional_Encryption
					index = i
					value = val

					add_to_variable = { GER_Regional_Encryption^i = PREV.val_SPY }	#Every region has val_SPY (which can be negative or positive) added to it.
				}
				ESPIONAGE_encryption_clamper = yes								#Running the clamper.
			}
			custom_effect_tooltip = ESPIONAGE_GER_encryption_global_tt
		}
	}

	clear_variable = i_SPY														#i_SPY is cleared.
	clear_variable = val_SPY													#val_SPY is cleared.
}

ESPIONAGE_USA_encryption_global_loop = {

	set_variable = { val_SPY_loc = val_SPY }

	if = {
		limit = {
			has_variable = i_SPY
		}

		set_variable = { i_SPY_loc = i_SPY }

		USA = {
			add_to_variable = { USA_Regional_Encryption^PREV.i_SPY = PREV.val_SPY }

			custom_effect_tooltip = ESPIONAGE_USA_encryption_global_loop_tt

			ESPIONAGE_encryption_clamper = yes
		}
		else = {
			USA = {
				for_each_loop = {
					array = USA_Regional_Encryption
					index = i
					value = val

					add_to_variable = { USA_Regional_Encryption^i = PREV.val_SPY }
				}
				custom_effect_tooltip = ESPIONAGE_USA_encryption_global_tt
				ESPIONAGE_encryption_clamper = yes
			}
		}
	}

	clear_variable = i_SPY
	clear_variable = val_SPY
}

####################
# Generic Commands #
####################

# These commands function using the arrays created in the above scripted effects. To access the variables individually, you need to append their index number to it, e.g.

# GER_Regional_Encryption^2 

# is the variable for Oceania.

### Agency Clampers ###

ESPIONAGE_encryption_clamper = { #To include other agency arrays, simply copy/paste a for_each_loop block present here and change the array and var to the array you want.

	for_each_loop = {
		array = GER_Regional_Encryption
		index = i
		value = val

		clamp_variable = {
			var = GER_Regional_Encryption^i
			min = 0
			max = 20
		}
	}

	for_each_loop = {
		array = USA_Regional_Encryption
		index = i
		value = val

		clamp_variable = {
			var = USA_Regional_Encryption^i
			min = 0
			max = 20
		}
	}

}

ESPIONAGE_decryption_clamper = {

	clamp_variable = {
		var = GER_Decryption
		min = 0
		max = 20
	}

	clamp_variable = {
		var = USA_Decryption
		min = 0
		max = 20
	}

}

### Encryption Manipulations ###

#GERMANY

ESPIONAGE_GER_decrease_global_encryption_small = {

	set_variable = {val_SPY = -1}

	ESPIONAGE_GER_encryption_global_loop = yes

}

ESPIONAGE_GER_decrease_global_encryption_med = {

	set_variable = {val_SPY = -2}

	ESPIONAGE_GER_encryption_global_loop = yes

}

ESPIONAGE_GER_decrease_global_encryption_big = {

	set_variable = {val_SPY = -3}

	ESPIONAGE_GER_encryption_global_loop = yes

}

ESPIONAGE_GER_increase_global_encryption_small = {

	set_variable = {val_SPY = 1}

	ESPIONAGE_GER_encryption_global_loop = yes

}

ESPIONAGE_GER_increase_global_encryption_med = {

	set_variable = {val_SPY = 2}

	ESPIONAGE_GER_encryption_global_loop = yes

}

ESPIONAGE_GER_increase_global_encryption_big = {

	set_variable = {val_SPY = 3}

	ESPIONAGE_GER_encryption_global_loop = yes

}

#UNITED STATES

ESPIONAGE_USA_decrease_global_encryption_small = {

	set_variable = {val_SPY = -1}

	ESPIONAGE_USA_encryption_global_loop = yes

}

ESPIONAGE_USA_decrease_global_encryption_med = {

	set_variable = {val_SPY = -2}

	ESPIONAGE_USA_encryption_global_loop = yes

}

ESPIONAGE_USA_decrease_global_encryption_big = {

	set_variable = {val_SPY = -3}

	ESPIONAGE_USA_encryption_global_loop = yes

}

ESPIONAGE_USA_increase_global_encryption_small = {

	set_variable = {val_SPY = 1}

	ESPIONAGE_USA_encryption_global_loop = yes

}

ESPIONAGE_USA_increase_global_encryption_med = {

	set_variable = {val_SPY = 2}

	ESPIONAGE_USA_encryption_global_loop = yes

}

ESPIONAGE_USA_increase_global_encryption_big = {

	set_variable = {val_SPY = 3}

	ESPIONAGE_USA_encryption_global_loop = yes

}

### Decryption Commands ###

#GERMANY

ESPIONAGE_GER_increase_decryption_small = {

	custom_effect_tooltip = ESPIONAGE_GER_decryption_increase_small

	add_to_variable = { GER_Decryption = 1 }

	ESPIONAGE_decryption_clamper = yes
}

ESPIONAGE_GER_increase_decryption_med = {

	custom_effect_tooltip = ESPIONAGE_GER_decryption_increase_med

	add_to_variable = { GER_Decryption = 2 }

	ESPIONAGE_decryption_clamper = yes
}

ESPIONAGE_GER_increase_decryption_big = {

	custom_effect_tooltip = ESPIONAGE_GER_decryption_increase_big

	add_to_variable = { GER_Decryption = 3 }

	ESPIONAGE_decryption_clamper = yes
}

ESPIONAGE_GER_decrease_decryption_small = {

	custom_effect_tooltip = ESPIONAGE_GER_decryption_decrease_small

	subtract_from_variable = { GER_Decryption = 1 }

	ESPIONAGE_decryption_clamper = yes
}

ESPIONAGE_GER_decrease_decryption_med = {

	custom_effect_tooltip = ESPIONAGE_GER_decryption_decrease_med

	subtract_from_variable = { GER_Decryption = 2 }

	ESPIONAGE_decryption_clamper = yes
}

ESPIONAGE_GER_decrease_decryption_big = {

	custom_effect_tooltip = ESPIONAGE_GER_decryption_decrease_big

	subtract_from_variable = { GER_Decryption = 3 }

	ESPIONAGE_decryption_clamper = yes
}

#UNITED STATES

ESPIONAGE_USA_increase_decryption_small = {

	custom_effect_tooltip = ESPIONAGE_USA_decryption_increase_small

	add_to_variable = { USA_Decryption = 1 }

	ESPIONAGE_decryption_clamper = yes
}

ESPIONAGE_USA_increase_decryption_med = {

	custom_effect_tooltip = ESPIONAGE_USA_decryption_increase_med

	add_to_variable = { USA_Decryption = 2 }

	ESPIONAGE_decryption_clamper = yes
}

ESPIONAGE_USA_increase_decryption_big = {

	custom_effect_tooltip = ESPIONAGE_USA_decryption_increase_big

	add_to_variable = { USA_Decryption = 3 }

	ESPIONAGE_decryption_clamper = yes
}

ESPIONAGE_USA_decrease_decryption_small = {

	custom_effect_tooltip = ESPIONAGE_USA_decryption_decrease_small

	subtract_from_variable = { USA_Decryption = 1 }

	ESPIONAGE_decryption_clamper = yes
}

ESPIONAGE_USA_decrease_decryption_med = {

	custom_effect_tooltip = ESPIONAGE_USA_decryption_decrease_med

	subtract_from_variable = { USA_Decryption = 2 }

	ESPIONAGE_decryption_clamper = yes
}

ESPIONAGE_USA_decrease_decryption_big = {

	custom_effect_tooltip = ESPIONAGE_USA_decryption_decrease_big

	subtract_from_variable = { USA_Decryption = 3 }

	ESPIONAGE_decryption_clamper = yes
}

## Mission Success calc ##

EESPIONAGE_GER_calculate_success = {
	set_temp_variable = { tempSuccess = 60 }

	#Boni from budget size
	set_temp_variable = {tempBudget = RND_budget}
	add_to_temp_variable = {tempSuccess = tempBudget}

	#Boni from expertise level
	set_temp_variable = {tempExpertise = RND_training_lvl}
	multiply_temp_variable = {tempExpertise = 0.02}
	add_to_temp_variable = {tempSuccess = tempExpertise}

	#Boni from researched thingies
	add_to_temp_variable = {tempSuccess = RND_mission_research_boni}

	#Calculating stuff

	for_each_loop = {
		array = GER_Mission_Success

		# Set up base success chance determined above
		set_variable = { GER_Mission_Success^i = tempSuccess }

		# Apply regional encryption/decryption modifiers, then clamp it
		subtract_from_variable = { GER_Mission_Success^i = GER_Regional_Encryption^i }
		add_to_variable = { GER_Mission_Success^i = GER_Decryption }
		clamp_variable = { var = GER_Mission_Success^i min = 0 max = 100 }

		# Calculate mission failure chance
		set_variable = { GER_Mission_Failure^i = 100 }
		subtract_from_variable = { GER_Mission_Failure^i = GER_Mission_Success^i }
	}
}
