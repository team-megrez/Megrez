###########################
# Political Events
###########################
# By Kallar, Nijato, Sir Rogers, Zankoas and ~mw~
###########################

add_namespace = generic_events

###############################
### Generic Faction Joining ###
###############################

country_event = { #Country requests to join faction
	id = generic_events.10
	title = generic_events.10.t
	desc = generic_events.10.d
	picture = GFX_report_event_generic_diplomacy1

	is_triggered_only = yes

	option = {
		log = "[GetLogInfo]: event generic_events.10 option generic_events.10.a"
		name = generic_events.10.a
		trigger = { is_faction_leader = yes }
		effect_tooltip = { add_to_faction = FROM }
		FROM = { country_event = generic_events.11 }
	}

	option = {
		log = "[GetLogInfo]: event generic_events.10 option generic_events.10.b"
		name = generic_events.10.b
		trigger = { is_faction_leader = no }
		faction_leader = { country_event = generic_events.12 }
	}

	option = {
		log = "[GetLogInfo]: event generic_events.10 option generic_events.10.c"
		name = generic_events.10.c
		ai_chance = { base = 0 }
		FROM = { country_event = generic_events.17 }
	}
}

country_event = { #FROM accepts
	id = generic_events.11
	title = generic_events.11.t
	desc = generic_events.11.d
	picture = GFX_report_event_generic_diplomacy1

	is_triggered_only = yes

	option = {
		log = "[GetLogInfo]: event generic_events.11 option generic_events.11.a"
		name = generic_events.11.a
		if = {
			limit = {
				FROM = {
					original_tag = AUS
					AUS_has_habsburgs = yes
					is_faction_leader = no
				}
			}
			set_country_flag = AUS_former_faction_member
		}
		FROM = { add_to_faction = ROOT }
	}
}

country_event = { #FROM negotiates alliance with FROM.FROM
	id = generic_events.12
	title = generic_events.12.t
	desc = generic_events.12.d
	picture = GFX_report_event_generic_diplomacy1

	is_triggered_only = yes

	option = {
		log = "[GetLogInfo]: event generic_events.12 option generic_events.12.a"
		name = generic_events.12.a
		effect_tooltip = { add_to_faction = FROM.FROM }
		FROM.FROM = { country_event = generic_events.13 }
		effect_tooltip = { FROM = { country_event = generic_events.14 } }
	}

	option = {
		log = "[GetLogInfo]: event generic_events.12 option generic_events.12.b"
		name = generic_events.12.b
		ai_chance = { base = 0 }
		FROM.FROM = { country_event = generic_events.15 }
		effect_tooltip = { FROM = { country_event = generic_events.16 } }
	}
}

country_event = { #Faction leader accepts (for new member)
	id = generic_events.13
	title = generic_events.13.t
	desc = generic_events.13.d
	picture = GFX_report_event_generic_diplomacy1

	is_triggered_only = yes

	immediate = {
		hidden_effect = { FROM.FROM = { country_event = generic_events.14 } }
	}

	option = {
		log = "[GetLogInfo]: event generic_events.13 option generic_events.13.a"
		name = generic_events.13.a
		if = {
			limit = {
				FROM.FROM = {
					original_tag = AUS
					AUS_has_habsburgs = yes
					is_faction_leader = no
				}
			}
			set_country_flag = AUS_former_faction_member
		}
		FROM = { add_to_faction = ROOT }
	}
}

country_event = { #Faction leader accepts (for negotiator)
	id = generic_events.14
	title = generic_events.14.t
	desc = generic_events.14.d
	picture = GFX_report_event_generic_diplomacy1

	is_triggered_only = yes

	option = {
		log = "[GetLogInfo]: event generic_events.14 option generic_events.14.a"
		name = generic_events.14.a
		effect_tooltip = { faction_leader = { add_to_faction = FROM } }
	}
}

country_event = { #Faction leader refuses
	id = generic_events.15
	title = generic_events.15.t
	desc = generic_events.15.d
	picture = GFX_report_event_generic_diplomacy1

	is_triggered_only = yes

	immediate = {
		hidden_effect = { FROM.FROM = { country_event = generic_events.16 } }
	}

	option = {
		log = "[GetLogInfo]: event generic_events.15 option generic_events.15.a"
		name = generic_events.15.a
		add_opinion_modifier = {
			target = FROM
			modifier = KR_outraged
		}
	}
}

country_event = { #Faction leader accepts (for new member FROM.FROM)
	id = generic_events.16
	title = generic_events.16.t
	desc = generic_events.16.d
	picture = GFX_report_event_generic_diplomacy1

	is_triggered_only = yes

	option = {
		log = "[GetLogInfo]: event generic_events.16 option generic_events.16.a"
		name = generic_events.16.a
		FROM.FROM = {
			reverse_add_opinion_modifier = {
				target = ROOT
				modifier = KR_displeased
			}
		}
	}
}

country_event = { #FROM refuses
	id = generic_events.17
	title = generic_events.17.t
	desc = generic_events.17.d
	picture = GFX_report_event_generic_diplomacy1

	is_triggered_only = yes

	option = {
		log = "[GetLogInfo]: event generic_events.17 option generic_events.17.a"
		name = generic_events.17.a
		add_opinion_modifier = {
			target = FROM
			modifier = KR_outraged
		}
	}
}

country_event = { #Country is invited to faction
	id = generic_events.18
	title = generic_events.18.t
	desc = generic_events.18.d
	picture = GFX_report_event_generic_diplomacy1

	is_triggered_only = yes

	option = {
		log = "[GetLogInfo]: event generic_events.18 option generic_events.18.a"
		name = generic_events.18.a
		effect_tooltip = {
			var:FROM.faction_leader = { add_to_faction = ROOT }
			apply_faction_joining_effects = yes
		}
		FROM = { country_event = generic_events.19 }
	}

	option = {
		log = "[GetLogInfo]: event generic_events.18 option generic_events.18.b"
		name = generic_events.18.b
		ai_chance = { base = 0 }
		FROM = { country_event = generic_events.20 }
	}
}

country_event = { #FROM accepts
	id = generic_events.19
	title = generic_events.19.t
	desc = generic_events.19.d
	picture = GFX_report_event_generic_diplomacy1

	is_triggered_only = yes

	option = {
		log = "[GetLogInfo]: event generic_events.19 option generic_events.19.a"
		name = generic_events.19.a
		faction_leader = { add_to_faction = FROM }
	}
}

country_event = { #FROM refuses
	id = generic_events.20
	title = generic_events.20.t
	desc = generic_events.20.d
	picture = GFX_report_event_generic_diplomacy1

	is_triggered_only = yes

	option = {
		log = "[GetLogInfo]: event generic_events.20 option generic_events.20.a"
		name = generic_events.20.a
		add_opinion_modifier = {
			target = FROM
			modifier = KR_disapproves_of_govt
		}
	}
}

#######################
### Faction Joining ###
#######################

country_event = { #event to remove the alert after ten days (donotlog)
	id = generic_events.25
	hidden = yes

	trigger = {
		is_in_array = { global.faction_joining_alerts = THIS }
	}

	is_triggered_only = yes

	option = {
		remove_from_array = { global.faction_joining_alerts = THIS }
		set_variable_to_random = global.kaiserreich_alerts_dirty
	}
}

#########################
### Incoming War-ning ###
#########################

# Warning about impending declaration of war (used for decisions)
country_event = { #donotlog
	id = generic_events.30
	hidden = yes

	is_triggered_only = yes

	option = {
		every_country = {
			limit = {
				is_ai = no
				OR = {
					is_ally_with = ROOT
					has_guaranteed = ROOT
					civilwar_target = ROOT
				}
				NOT = { is_ally_with = FROM }
			}
			set_variable = { alert_war_target_@FROM = ROOT }
			add_to_array = { incoming_war_alerts = FROM }
			scoped_sound_effect = alert_enemy_generate_wargoal_sound
		}
		set_variable_to_random = global.kaiserreich_alerts_dirty
	}
}

# Warning about impending declaration of war for allies (used for decisions)
country_event = {
	id = generic_events.32 #donotlog
	title = generic_events.30.t
	desc = generic_events.32.d
	picture = GFX_report_event_generic_towar

	is_triggered_only = yes

	trigger = { is_ai = no }

	option = {
		name = generic_events.30.a
	}
}

######################################
### Setting up Factional Rivalries ###
######################################

country_event = { #donotlog
	id = generic_events.50
	hidden = yes
	is_triggered_only = yes

	trigger = {
		GER = {
			exists = yes
			is_ally_with = ROOT
		}
		NOT = { has_variable = GER_faction }
	}

	immediate = {
		every_other_country = {
			limit = {
				OR = {
					AND = {
						ENT = { exists = yes }
						is_ally_with = ENT
					}
					AND = {
						INT = { exists = yes }
						is_ally_with = INT
					}
				}
			}
			add_opinion_modifier = {
				target = ROOT
				modifier = KR_factional_rivalry
			}
			if = {
				limit = { is_ally_with = INT }
				embargo_PREV = yes
			}
		}
		set_variable = { GER_faction = 1 }
	}
}

country_event = { #donotlog
	id = generic_events.51
	hidden = yes
	is_triggered_only = yes

	trigger = {
		has_variable = GER_faction
		GER = {
			exists = yes
			NOT = { is_ally_with = ROOT }
		}
	}

	immediate = {
		every_other_country = {
			limit = {
				OR = {
					AND = {
						ENT = { exists = yes }
						is_ally_with = ENT
					}
					AND = {
						INT = { exists = yes }
						is_ally_with = INT
					}
				}
			}
			remove_opinion_modifier = {
				target = ROOT
				modifier = KR_factional_rivalry
			}
			ROOT = {
				remove_opinion_modifier = {
					target = PREV
					modifier = KR_factional_rivalry
				}
			}
			clear_embargo_PREV = yes
		}
		clear_variable = GER_faction
	}
}

country_event = { #donotlog
	id = generic_events.52
	hidden = yes
	is_triggered_only = yes

	trigger = {
		ENT = {
			exists = yes
			is_ally_with = ROOT
		}
		NOT = { has_variable = ENT_faction }
	}

	immediate = {
		every_other_country = {
			limit = {
				OR = {
					AND = {
						GER = { exists = yes }
						is_ally_with = GER
					}
					AND = {
						INT = { exists = yes }
						is_ally_with = INT
					}
				}
			}
			add_opinion_modifier = {
				target = ROOT
				modifier = KR_factional_rivalry
			}
			if = {
				limit = {
					INT = { exists = yes }
					is_ally_with = INT
				}
				embargo_PREV = yes
			}
		}
		set_variable = { ENT_faction = 1 }
	}
}

country_event = { #donotlog
	id = generic_events.53
	hidden = yes
	is_triggered_only = yes

	trigger = {
		has_variable = ENT_faction
		ENT = {
			exists = yes
			NOT = { is_ally_with = ROOT }
		}
	}

	immediate = {
		every_other_country = {
			limit = {
				OR = {
					AND = {
						GER = { exists = yes }
						is_ally_with = GER
					}
					AND = {
						INT = { exists = yes }
						is_ally_with = INT
					}
				}
			}
			remove_opinion_modifier = {
				target = ROOT
				modifier = KR_factional_rivalry
			}
			ROOT = {
				remove_opinion_modifier = {
					target = PREV
					modifier = KR_factional_rivalry
				}
			}
			clear_embargo_PREV = yes
		}
		clear_variable = ENT_faction
	}
}

country_event = { #donotlog
	id = generic_events.54
	hidden = yes
	is_triggered_only = yes

	trigger = {
		INT = {
			exists = yes
			is_ally_with = ROOT
		}
		NOT = { has_variable = INT_faction }
	}

	immediate = {
		every_other_country = {
			limit = {
				OR = {
					AND = {
						GER = { exists = yes }
						is_ally_with = GER
					}
					AND = {
						ENT = { exists = yes }
						is_ally_with = ENT
					}
				}
			}
			add_opinion_modifier = {
				target = ROOT
				modifier = KR_factional_rivalry
			}
			embargo_PREV = yes
		}
		set_variable = { INT_faction = 1 }
	}
}

country_event = { #donotlog
	id = generic_events.55
	hidden = yes
	is_triggered_only = yes

	trigger = {
		has_variable = INT_faction
		INT = {
			exists = yes
			NOT = { is_ally_with = ROOT }
		}
	}

	immediate = {
		every_other_country = {
			limit = {
				OR = {
					AND = {
						GER = { exists = yes }
						is_ally_with = GER
					}
					AND = {
						INT = { exists = yes }
						is_ally_with = INT
					}
				}
			}
			remove_opinion_modifier = {
				target = ROOT
				modifier = KR_factional_rivalry
			}
			ROOT = {
				remove_opinion_modifier = {
					target = PREV
					modifier = KR_factional_rivalry
				}
			}
			clear_embargo_PREV = yes
		}
		clear_variable = INT_faction
	}
}

#################################
### Returning Cores to Allies ###
#################################

# Which cores to return?
country_event = {
	id = generic_events.75
	title = generic_events.75.t
	desc = generic_events.75.d
	picture = GFX_report_event_generic_diplomacy2

	is_triggered_only = yes

	option = {
		log = "[GetLogInfo]: event generic_events.75 option generic_events.75.a"
		name = generic_events.75.a #return all land
		ai_chance = { base = 1 }
		clr_country_flag = KR_returning_land
		custom_effect_tooltip = KR_will_return_all
		hidden_effect = {
			event_target:return_to = {
				country_event = generic_events.76
			}
		}
	}
	option = {
		log = "[GetLogInfo]: event generic_events.75 option generic_events.75.b"
		name = generic_events.75.b #return all land but vital provinces
		trigger = {
			any_owned_state = {
				OR = {
					is_core_of = event_target:return_to
					is_claimed_by = event_target:return_to
				}
				is_claim_or_core_of_ROOT = no
				is_important_state = yes
				NOT = { has_variable = can_integrate_@ROOT }
				NOT = { any_country_with_core = { has_variable = ROOT.can_integrate_@THIS } }
				NOT = { has_state_flag = KR_keeping_state@ROOT }
			}
		}
		ai_chance = { base = 100 }
		custom_effect_tooltip = KR_will_return_rest
		hidden_effect = {
			clr_country_flag = KR_returning_land
			every_owned_state = {
				limit = {
					OR = {
						is_core_of = event_target:return_to
						is_claimed_by = event_target:return_to
					}
					is_claim_or_core_of_ROOT = no
					is_important_state = yes
					NOT = { has_state_flag = KR_keeping_state@ROOT }
				}
				set_state_flag = KR_keeping_state@ROOT
			}
			if = {
				limit = {
					any_owned_state = {
						OR = {
							is_core_of = event_target:return_to
							is_claimed_by = event_target:return_to
						}
						is_claim_or_core_of_ROOT = no
						is_important_state = no
						NOT = { has_variable = can_integrate_@ROOT }
						NOT = { any_country_with_core = { has_variable = ROOT.can_integrate_@THIS } }
						NOT = { has_state_flag = KR_keeping_state@ROOT }
						OR = {
							is_coastal = yes
							any_neighbor_state = { is_owned_by = event_target:return_to }
						}
					}
				}
				event_target:return_to = {
					country_event = generic_events.76
				}
			}
		}
	}
	option = {
		log = "[GetLogInfo]: event generic_events.75 option generic_events.75.c"
		name = generic_events.75.c #return cores only
		trigger = {
			is_ai = no
			any_owned_state = {
				is_claim_or_core_of_ROOT = no
				is_important_state = no
				NOT = { has_variable = can_integrate_@ROOT }
				NOT = { any_country_with_core = { has_variable = ROOT.can_integrate_@THIS } }
				NOT = { has_state_flag = KR_keeping_state@ROOT }
				is_core_of = event_target:return_to
			}
			any_owned_state = {
				is_claim_or_core_of_ROOT = no
				is_important_state = no
				NOT = { has_variable = can_integrate_@ROOT }
				NOT = { any_country_with_core = { has_variable = ROOT.can_integrate_@THIS } }
				NOT = { has_state_flag = KR_keeping_state@ROOT }
				NOT = { is_core_of = event_target:return_to }
				is_claimed_by = event_target:return_to
			}
		}
		custom_effect_tooltip = KR_will_return_cores
		hidden_effect = {
			clr_country_flag = KR_returning_land
			every_owned_state = {
				limit = {
					is_claim_or_core_of_ROOT = no
					NOT = { has_variable = can_integrate_@ROOT }
					NOT = { any_country_with_core = { has_variable = ROOT.can_integrate_@THIS } }
					NOT = { has_state_flag = KR_keeping_state@ROOT }
					NOT = { is_core_of = event_target:return_to }
					is_claimed_by = event_target:return_to
				}
				set_state_flag = KR_keeping_state@ROOT
			}
			event_target:return_to = {
				country_event = generic_events.76
			}
		}
	}
	option = {
		log = "[GetLogInfo]: event generic_events.75 option generic_events.75.e"
		name = generic_events.75.e #keep it all you pig
		ai_chance = { base = 0 }
		clr_country_flag = KR_returning_land
		custom_effect_tooltip = KR_will_not_return
		hidden_effect = {
			every_owned_state = {
				limit = {
					OR = {
						is_core_of = event_target:return_to
						is_claimed_by = event_target:return_to
					}
					is_claim_or_core_of_ROOT = no
					NOT = { has_variable = can_integrate_@ROOT }
					NOT = { any_country_with_core = { has_variable = ROOT.can_integrate_@THIS } }
					NOT = { has_state_flag = KR_keeping_state@ROOT }
				}
				set_state_flag = KR_keeping_state@ROOT
			}
		}
	}
}

# Cores/claims have been returned by an ally
country_event = {
	id = generic_events.76
	title = generic_events.76.t
	desc = generic_events.76.d
	picture = GFX_report_event_generic_diplomacy2

	is_triggered_only = yes

	option = {
		log = "[GetLogInfo]: event generic_events.76 option generic_events.76.a"
		name = generic_events.76.a
		add_opinion_modifier = {
			target = FROM
			modifier = KR_returned_land
		}
		set_temp_variable = { tag_to_release = ROOT }
		while_loop_effect = {
			limit = {
				FROM = {
					any_owned_state = {
						is_claim_or_core_of_ROOT = yes
						is_claim_or_core_of_FROM = no
						NOT = { has_variable = can_integrate_@FROM }
						NOT = { any_country_with_core = { has_variable = FROM.can_integrate_@THIS } }
						OR = {
							is_coastal = yes
							any_neighbor_state = { is_owned_by = ROOT }
						}
						NOT = { has_state_flag = KR_keeping_state@FROM }
					}
				}
			}
			FROM = {
				every_owned_state = {
					limit = {
						is_claim_or_core_of_ROOT = yes
						is_claim_or_core_of_FROM = no
						NOT = { has_variable = can_integrate_@FROM }
						NOT = { any_country_with_core = { has_variable = FROM.can_integrate_@THIS } }
						OR = {
							is_coastal = yes
							any_neighbor_state = { is_owned_by = ROOT }
						}
						NOT = { has_state_flag = KR_keeping_state@FROM }
					}
					transfer_state_without_overriding_occupation = yes
				}
			}
		}
	}
}

##################################
### Tag Switch to Puppet Event ###
##################################
#
# current disabled
# should you want to enable it, first uncomment this event (duh)
# then add this after the puppet command in the annexation events you want it to fire in:
# TAG = { save_global_event_target_as = change_tag_target }
# country_event = generic_events.2
# where TAG is the tag that has just been puppeted you will switch to after
#
#country_event = {
#	id = generic_events.2
#	title = generic_events.2.t
#	desc = generic_events.2.d
#	picture = GFX_report_event_generic_diplomacy3
#
#	is_triggered_only = yes
#
#	option = {
#		name = generic_events.2.a #Stay as main tag
#		clear_global_event_target = change_tag_target
#	}
#
#	option = {
#		name = generic_events.2.b #Change to puppet tag
#		event_target:change_tag_target = {
#			change_tag_from = ROOT
#		}
#		clear_global_event_target = change_tag_target
#	}
#}

##################################
### 	  Puppet Events 	   ###
##################################

# There are five main puppet levels:
#  1. Integrated Puppet (kr_integrated_puppet) - the lowest, and countries normally can't raise above this if set here
#  2. Occupied Puppet (kr_occupied_puppet) - the default state, countries will be able to raise to the next level once they get some military, based on their size
#  3. Puppet (kr_default_puppet) - the equivalent to the old colony level, only majors can generally raise higher than this on their own
#	4. Autonomous Puppet (kr_autonomous_puppet) - the equivalent to the old dominion level, only more majors can raise higher than this on their own
#	5. Nominal Puppet (kr_nominal_puppet) - a puppet in name only, barely restricted, majors can eventually move to freedom from this level
#
# NOTE: Currently there is no system in place for moving autonomy back downwards
#

# Occupied Puppet moves to Puppet level once they've established a military
country_event = {
	id = generic_events.100
	title = generic_events.100.t
	desc = generic_events.100.d
	picture = GFX_report_event_generic_diplomacy4

	trigger = {
		has_autonomy_state = kr_occupied_puppet
		OR = {
			overlord = { has_war = no }
			overlord = { all_enemy_country = { has_war_with = ROOT } }
		}
		has_political_power > 0
		has_stability > 0.25

		set_temp_variable = { numunits = ROOT.owned_states }
		clamp_temp_variable = { var = numunits max = 25 }
		num_divisions > numunits

		NOT = { has_country_flag = KR_can_raise_autonomy_level }
	}

	mean_time_to_happen = {
		months = 3
		modifier = {
			factor = 0.5
			has_stability > 0.5
		}
	}

	immediate = {
		set_country_flag = KR_can_raise_autonomy_level
		overlord = { save_event_target_as = overlord_name }
	}

	option = {
		log = "[GetLogInfo]: event generic_events.100 option generic_events.100.a"
		name = generic_events.100.a
		get_current_government_type = yes
		overlord = {
			set_autonomy = {
				target = ROOT
				autonomy_state = kr_default_puppet
				end_wars = no
			}
			hidden_effect = { country_event = generic_events.101 }
		}
		restore_previous_government_type = yes
		clr_country_flag = KR_can_raise_autonomy_level
	}
}

country_event = {
	id = generic_events.101
	title = generic_events.101.t
	desc = generic_events.101.d
	picture = GFX_report_event_generic_diplomacy4

	is_triggered_only = yes

	option = {
		log = "[GetLogInfo]: event generic_events.101 option generic_events.101.a"
		name = generic_events.101.a
		custom_effect_tooltip = FROM_becomes_puppet
	}
}

# Puppet who is powerful enough moves to Autonomous Puppet
country_event = {
	id = generic_events.102
	title = generic_events.102.t
	picture = GFX_report_event_generic_diplomacy4

	desc = {
		text = generic_events.102.d.tfv
		trigger = { has_subject_autonomy_feature = yes }
	}
	desc = {
		text = generic_events.102.d
		trigger = { has_subject_autonomy_feature = no }
	}

	trigger = {
		has_autonomy_state = kr_default_puppet
		OR = {
			overlord = { has_war = no }
			overlord = { all_enemy_country = { has_war_with = ROOT } }
		}
		has_political_power > 0
		has_stability > 0.50
		has_army_manpower = { size > 100000 }
		NOT = {
			has_country_flag = KR_can_raise_autonomy_level
			overlord = {
				strength_ratio = { tag = ROOT ratio > 3.0 }
			}
		}
	}

	mean_time_to_happen = {
		months = 24
		modifier = {
			factor = 0.5
			overlord = { has_elected_government = yes }
		}
		modifier = {
			factor = 1.5
			overlord = {
				OR = {
					has_authoritarian_government = yes
					has_government = totalist
				}
			}
		}
		modifier = {
			factor = 0.8
			overlord = {
				strength_ratio = { tag = ROOT ratio < 2.0 }
			}
		}
		modifier = {
			factor = 0.8
			overlord = {
				strength_ratio = { tag = ROOT ratio < 1.5 }
			}
		}
		modifier = {
			factor = 0.5
			overlord = {
				strength_ratio = { tag = ROOT ratio < 1.0 }
			}
		}
		modifier = {
			factor = 0.5
			overlord = {
				strength_ratio = { tag = ROOT ratio < 0.75 }
			}
		}
		modifier = {
			factor = 0.5
			has_stability > 0.75
		}
	}

	immediate = {
		set_country_flag = KR_can_raise_autonomy_level
		overlord = { save_event_target_as = overlord_name }
	}

	option = {
		log = "[GetLogInfo]: event generic_events.102 option generic_events.102.a"
		name = generic_events.102.a
		if = {
			limit = { has_subject_autonomy_feature = yes }
			custom_effect_tooltip = may_raise_autonomy
			add_autonomy_ratio = {
				value = 0.25
				localization = clamour_for_autonomy
			}
		}
		else = {
			get_current_government_type = yes
			overlord = {
				set_autonomy = {
					target = ROOT
					autonomy_state = kr_autonomous_puppet
					end_wars = no
				}
				hidden_effect = {
					country_event = generic_events.103
				}
			}
			restore_previous_government_type = yes
			clr_country_flag = KR_can_raise_autonomy_level
		}
	}
}

country_event = {
	id = generic_events.103
	title = generic_events.103.t
	desc = generic_events.103.d
	picture = GFX_report_event_generic_diplomacy4

	is_triggered_only = yes

	option = {
		log = "[GetLogInfo]: event generic_events.103 option generic_events.101.a"
		name = generic_events.101.a
		custom_effect_tooltip = FROM_becomes_autonomous_puppet
	}
}

# Autonomous Puppet who is a major moves to Nominal Puppet
country_event = {
	id = generic_events.104
	title = generic_events.102.t
	picture = GFX_report_event_generic_diplomacy4

	desc = {
		text = generic_events.102.d.tfv
		trigger = { has_subject_autonomy_feature = yes }
	}
	desc = {
		text = generic_events.102.d
		trigger = { has_subject_autonomy_feature = no }
	}

	trigger = {
		has_autonomy_state = kr_autonomous_puppet
		OR = {
			overlord = { has_war = no }
			overlord = { all_enemy_country = { has_war_with = ROOT } }
		}
		has_political_power > 0
		has_stability > 0.70
		has_army_manpower = { size > 100000 }
		OR = {
			AND = {
				num_of_factories > 49
				date < 1940.1.1
			}
			AND = {
				num_of_factories > 74
				NOT = { date < 1940.1.1 }
				date < 1942.1.1
			}
			AND = {
				num_of_factories > 99
				NOT = { date < 1942.1.1 }
				date < 1944.1.1
			}
			AND = {
				num_of_factories > 124
				NOT = { date < 1944.1.1 }
				date < 1946.1.1
			}
			num_of_factories > 149
		}
		NOT = {
			has_country_flag = KR_can_raise_autonomy_level
			overlord = {
				strength_ratio = { tag = ROOT ratio > 3.0 }
			}
		}
	}

	mean_time_to_happen = {
		months = 36
		modifier = {
			factor = 0.5
			overlord = { has_elected_government = yes }
		}
		modifier = {
			factor = 1.5
			overlord = {
				OR = {
					has_authoritarian_government = yes
					has_government = totalist
				}
			}
		}
		modifier = {
			factor = 0.8
			overlord = {
				strength_ratio = { tag = ROOT ratio < 2.0 }
			}
		}
		modifier = {
			factor = 0.8
			overlord = {
				strength_ratio = { tag = ROOT ratio < 1.5 }
			}
		}
		modifier = {
			factor = 0.5
			overlord = {
				strength_ratio = { tag = ROOT ratio < 1.0 }
			}
		}
		modifier = {
			factor = 0.5
			overlord = {
				strength_ratio = { tag = ROOT ratio < 0.75 }
			}
		}
		modifier = {
			factor = 0.8
			has_stability > 0.80
		}
	}

	immediate = {
		set_country_flag = KR_can_raise_autonomy_level
		overlord = { save_event_target_as = overlord_name }
	}

	option = {
		log = "[GetLogInfo]: event generic_events.104 option generic_events.102.a"
		name = generic_events.102.a
		if = {
			limit = { has_subject_autonomy_feature = yes }
			custom_effect_tooltip = may_raise_autonomy
			add_autonomy_ratio = {
				value = 0.25
				localization = clamour_for_autonomy
			}
		}
		else = {
			get_current_government_type = yes
			overlord = {
				set_autonomy = {
					target = ROOT
					autonomy_state = kr_nominal_puppet
					end_wars = no
				}
				hidden_effect = {
					country_event = generic_events.105
				}
			}
			restore_previous_government_type = yes
			clr_country_flag = KR_can_raise_autonomy_level
		}
	}
}

country_event = {
	id = generic_events.105
	title = generic_events.103.t
	desc = generic_events.103.d
	picture = GFX_report_event_generic_diplomacy4

	is_triggered_only = yes

	option = {
		log = "[GetLogInfo]: event generic_events.105 option generic_events.103.a"
		name = generic_events.103.a
		custom_effect_tooltip = FROM_becomes_nominal_puppet
	}
}

# Nominal Puppet who is a major can become free
country_event = {
	id = generic_events.106
	title = generic_events.106.t
	picture = GFX_report_event_generic_diplomacy4

	desc = {
		text = generic_events.106.d.tfv
		trigger = { has_subject_autonomy_feature = yes }
	}
	desc = {
		text = generic_events.106.d
		trigger = { has_subject_autonomy_feature = no }
	}

	trigger = {
		has_autonomy_state = kr_nominal_puppet
		is_actual_major = yes
		OR = {
			overlord = { has_war = no }
			overlord = { all_enemy_country = { has_war_with = ROOT } }
		}
		has_political_power > 0
		has_stability > 0.70
		has_army_manpower = { size > 100000 }
		NOT = {
			has_country_flag = KR_can_become_free
			overlord = {
				strength_ratio = { tag = ROOT ratio > 3.0 }
			}
		}
	}

	mean_time_to_happen = {
		months = 36
		modifier = {
			factor = 0.5
			overlord = { has_elected_government = yes }
		}
		modifier = {
			factor = 1.5
			overlord = {
				OR = {
					has_authoritarian_government = yes
					has_government = totalist
				}
			}
		}
		modifier = {
			factor = 0.8
			overlord = {
				strength_ratio = { tag = ROOT ratio < 2.0 }
			}
		}
		modifier = {
			factor = 0.8
			overlord = {
				strength_ratio = { tag = ROOT ratio < 1.5 }
			}
		}
		modifier = {
			factor = 0.5
			overlord = {
				strength_ratio = { tag = ROOT ratio < 1.0 }
			}
		}
		modifier = {
			factor = 0.5
			overlord = {
				strength_ratio = { tag = ROOT ratio < 0.75 }
			}
		}
		modifier = {
			factor = 0.8
			has_stability > 0.80
		}
	}

	immediate = {
		set_country_flag = KR_can_become_free
		overlord = { save_event_target_as = overlord_name }
	}

	option = {
		log = "[GetLogInfo]: event generic_events.106 option generic_events.106.a"
		name = generic_events.106.a
		trigger = { has_subject_autonomy_feature = yes }
		custom_effect_tooltip = may_become_free
		add_autonomy_ratio = {
			value = 0.25
			localization = clamour_for_independence
		}
	}
	option = {
		log = "[GetLogInfo]: event generic_events.106 option generic_events.106.b"
		name = generic_events.106.b # Demand independence
		trigger = {
			has_subject_autonomy_feature = no
		}
		overlord = {
			country_event = generic_events.107
		}
	}
	option = {
		log = "[GetLogInfo]: event generic_events.106 option generic_events.106.c"
		name = generic_events.106.c # Leave it be
		trigger = {
			has_subject_autonomy_feature = no
			is_ai = no
		}
		add_stability = -0.10
	}
}

country_event = {
	id = generic_events.107
	title = generic_events.107.t
	desc = generic_events.107.d
	picture = GFX_report_event_generic_diplomacy4

	is_triggered_only = yes

	option = {
		log = "[GetLogInfo]: event generic_events.107 option generic_events.107.a"
		name = generic_events.107.a #Agree
		add_opinion_modifier = { target = FROM modifier = KR_close_allies }
		FROM = {
			clr_country_flag = KR_can_become_free
			add_opinion_modifier = { target = ROOT modifier = KR_close_allies }
		}
		set_autonomy = {
			target = FROM
			autonomy_state = autonomy_free
		}
	}
	option = {
		log = "[GetLogInfo]: event generic_events.107 option generic_events.107.b"
		name = generic_events.107.b #Refuse
		ai_chance = { base = 0 }
		FROM = {
			add_opinion_modifier = { target = ROOT modifier = KR_outraged }
			country_event = generic_events.108
		}
	}
}

country_event = {
	id = generic_events.108
	title = generic_events.108.t
	desc = generic_events.108.d
	picture = GFX_report_event_generic_diplomacy4

	is_triggered_only = yes

	option = {
		log = "[GetLogInfo]: event generic_events.108 option generic_events.108.a"
		name = generic_events.108.a
		clr_country_flag = KR_can_become_free
		set_country_flag = KR_independence_refused
		add_war_support = 0.10
		unlock_decision_tooltip = KR_fight_for_independence
	}
}

# Puppet declares themselves free
country_event = {
	id = generic_events.109
	title = generic_events.109.t
	desc = generic_events.109.d
	picture = GFX_report_event_generic_diplomacy4

	is_triggered_only = yes

	option = {
		log = "[GetLogInfo]: event generic_events.109 option generic_events.109.a"
		name = generic_events.109.a #Let them go
		add_political_power = -50
	}
	option = {
		log = "[GetLogInfo]: event generic_events.109 option generic_events.109.b"
		name = generic_events.109.b #Fight
		ai_chance = { base = 0 }
		declare_war_on = {
			target = FROM
			type = annex_everything
		}
		set_country_flag = KR_independence_war_overlord
		FROM = { set_country_flag = KR_independence_war }
	}
}

# Peace event for independence war
country_event = {
	id = generic_events.110
	title = generic_events.110.t
	desc = generic_events.110.d

	trigger = {
		has_war = yes
		has_country_flag = { flag = KR_independence_war days > 180 }
		surrender_progress < 0.10
		OR = {
			is_in_faction = no
			is_faction_leader = yes
		}
		any_enemy_country = {
			has_country_flag = KR_independence_war_overlord
			surrender_progress < 0.10
		}
	}

	mean_time_to_happen = {
		days = 30
	}

	option = {
		log = "[GetLogInfo]: event generic_events.110 option generic_events.110.a"
		name = generic_events.110.a #Let's end this
		random_country = {
			limit = { has_country_flag = KR_independence_war_overlord }
			country_event = generic_events.111
		}
	}
	option = {
		log = "[GetLogInfo]: event generic_events.110 option generic_events.110.a"
		name = generic_events.110.a #Fight on
		ai_chance = { base = 0 }
		add_war_support = -0.10
	}
}

country_event = {
	id = generic_events.111
	title = generic_events.111.t
	desc = generic_events.111.d

	is_triggered_only = yes

	option = {
		log = "[GetLogInfo]: event generic_events.111 option generic_events.111.a"
		name = generic_events.111.a #Let's end this
		add_political_power = -50
		FROM = { white_peace_with_ROOT = yes }
	}
	option = {
		log = "[GetLogInfo]: event generic_events.111 option generic_events.111.a"
		name = generic_events.111.a #Fight on
		ai_chance = { base = 0 }
		add_war_support = -0.10
	}
}

##################################
###   Demobilization Events    ###
##################################

# Check after a war whether we should be demobilizing
country_event = {
	id = generic_events.120

	hidden = yes
	is_triggered_only = yes

	trigger = {
		OR = {
			has_unsupported_economic_law_ai = yes
			has_unsupported_manpower_law_ai = yes
		}
		is_ai = yes
		NOT = { has_game_rule = { rule = demobilization_options option = NONE } }
		ROOT_is_threatened_cautious = no
	}

	immediate = {
		clr_country_flag = has_demobilization_check
		if = {
			limit = { has_unattained_important_goals = no }
			if = {
				limit = { has_unsupported_economic_law_ai = yes }
				if = {
					limit = { has_war_support < 0.15 }
					if = {
						limit = { has_idea = tot_economic_mobilisation }
						add_political_power = 300
					}
					else_if = {
						limit = { has_idea = war_economy }
						add_political_power = 225
					}
					else_if = {
						limit = { has_idea = partial_economic_mobilisation }
						add_political_power = 150
					}
					else = {
						add_political_power = 75
					}
					add_ideas = civilian_economy
				}
				else_if = {
					limit = { has_war_support < 0.25 }
					if = {
						limit = { has_idea = tot_economic_mobilisation }
						add_political_power = 225
					}
					else_if = {
						limit = { has_idea = war_economy }
						add_political_power = 150
					}
					else = {
						add_political_power = 75
					}
					add_ideas = low_economic_mobilisation
				}
				else = {
					if = {
						limit = { has_idea = tot_economic_mobilisation }
						add_political_power = 150
					}
					else = {
						add_political_power = 75
					}
					add_ideas = partial_economic_mobilisation
				}
			}

			if = {
				limit = { has_unsupported_manpower_law_ai = yes }
				if = {
					limit = { has_war_support < 0.1 }
					if = {
						limit = { has_idea = scraping_the_barrel }
						add_political_power = 375
					}
					else_if = {
						limit = { has_idea = all_adults_serve }
						add_political_power = 300
					}
					else_if = {
						limit = { has_idea = service_by_requirement }
						add_political_power = 225
					}
					else_if = {
						limit = { has_idea = extensive_conscription }
						add_political_power = 150
					}
					else = {
						add_political_power = 75
					}
					add_ideas = volunteer_only
				}
				else = {
					if = {
						limit = { has_idea = scraping_the_barrel }
						add_political_power = 300
					}
					else_if = {
						limit = { has_idea = all_adults_serve }
						add_political_power = 225
					}
					else_if = {
						limit = { has_idea = service_by_requirement }
						add_political_power = 150
					}
					else = {
						add_political_power = 75
					}
					add_ideas = limited_conscription
				}
			}
		}

		if = {
			limit = { NOT = { has_country_flag = has_reduce_units_check } }
			set_country_flag = has_reduce_units_check
			country_event = { id = generic_events.121 days = 4 random_hours = 96 }
		}
	}
}

# Repeated check for whether an AI country should reduce its number of units
country_event = {
	id = generic_events.121

	hidden = yes
	is_triggered_only = yes

	option = {
		log = "[GetLogInfo]: event generic_events.121 option 1"
		if = {
			limit = {
				has_exceeded_maximum_divisions = yes
				is_ai = yes
				NOT = { has_game_rule = { rule = unit_limit_options option = NONE } }
				ROOT_is_threatened_cautious = no
				has_unattained_important_goals = no
			}
			disband_one_to_three_divisions = yes
			country_event = { id = generic_events.121 days = 7 random_hours = 72 }
		}
		else = {
			clr_country_flag = has_reduce_units_check
		}
	}
}

# Dynamically add operative nationalities
country_event = { #donotlog
	id = generic_events.209

	hidden = yes
	is_triggered_only = yes

	option = {
		every_country = {
			limit = { has_intelligence_agency = yes }
			every_operative = { add_operative_nationalities = yes }
		}
	}
}

##################################
###    State Transfer Events   ###
##################################

# Puppeting
country_event = {
	id = generic_events.250
	title = generic_events.250.t
	desc = generic_events.250.d

	is_triggered_only = yes

	option = {
		log = "[GetLogInfo]: event generic_events.250 option generic_events.250.a"
		name = generic_events.250.a #Regular Puppet
		if = {
			limit = {
				event_target:marked_country = { is_in_faction = yes }
				event_target:to_be_overlord = {
					is_in_faction = yes
					NOT = { is_in_faction_with = event_target:marked_country }
				}
			}
			event_target:marked_country = { leave_faction = yes }
		}
		event_target:to_be_overlord = { puppet = event_target:marked_country }
		if = {
			limit = {
				event_target:to_be_overlord = {
					is_in_faction = yes
					NOT = { is_in_faction_with = event_target:marked_country }
				}
			}
			event_target:to_be_overlord = {
				faction_leader = { add_to_faction = event_target:marked_country }
			}
		}
		clear_global_event_target = to_be_overlord
		add_to_variable = { ROOT.update_stt_gui = 1 }
	}
	option = {
		log = "[GetLogInfo]: event generic_events.250 option generic_events.250.b"
		name = generic_events.250.b #Keep Old Government
		if = {
			limit = {
				event_target:marked_country = { is_in_faction = yes }
				event_target:to_be_overlord = {
					is_in_faction = yes
					NOT = { is_in_faction_with = event_target:marked_country }
				}
			}
			event_target:marked_country = { leave_faction = yes }
		}
		event_target:marked_country = { get_current_government_type = yes }
		custom_effect_tooltip = puppet_but_keep_government_tt
		hidden_effect = {
			event_target:to_be_overlord = { puppet = event_target:marked_country }
		}
		event_target:marked_country = { restore_previous_government_type = yes }
		if = {
			limit = {
				event_target:to_be_overlord = {
					is_in_faction = yes
					NOT = { is_in_faction_with = event_target:marked_country }
				}
			}
			event_target:to_be_overlord = {
				faction_leader = { add_to_faction = event_target:marked_country }
			}
		}
		clear_global_event_target = to_be_overlord
		add_to_variable = { ROOT.update_stt_gui = 1 }
	}
	option = {
		log = "[GetLogInfo]: event generic_events.250 option generic_events.250.c"
		name = generic_events.250.c
		clear_global_event_target = to_be_overlord
	}
}

# Free Puppet
country_event = {
	id = generic_events.251
	title = generic_events.251.t
	desc = generic_events.251.d

	is_triggered_only = yes

	option = {
		log = "[GetLogInfo]: event generic_events.251 option generic_events.250.a"
		name = generic_events.250.a
		event_target:marked_country = {
			overlord = {
				set_autonomy = {
					target = event_target:marked_country
					autonomy_state = autonomy_free
				}
			}
		}
		add_to_variable = { ROOT.update_stt_gui = 1 }
	}
	option = {
		log = "[GetLogInfo]: event generic_events.251 option generic_events.250.c"
		name = generic_events.250.c
	}
}

# Add to Faction
country_event = {
	id = generic_events.252
	title = generic_events.252.t
	desc = generic_events.252.d

	is_triggered_only = yes

	option = {
		log = "[GetLogInfo]: event generic_events.252 option generic_events.250.a"
		name = generic_events.250.a
		event_target:marked_country = {
			if = {
				limit = { is_faction_leader = yes }
				dismantle_faction = yes
			}
			else_if = {
				limit = { is_in_faction = yes }
				leave_faction = yes
			}
		}
		event_target:to_be_faction_leader = {
			faction_leader = {
				add_to_faction = event_target:marked_country
			}
		}
		clear_global_event_target = to_be_faction_leader
		add_to_variable = { ROOT.update_stt_gui = 1 }
	}
	option = {
		log = "[GetLogInfo]: event generic_events.252 option generic_events.250.c"
		name = generic_events.250.c
		clear_global_event_target = to_be_faction_leader
	}
}

# Make Faction Leader
country_event = {
	id = generic_events.253
	title = generic_events.253.t
	desc = generic_events.253.d

	is_triggered_only = yes

	option = {
		log = "[GetLogInfo]: event generic_events.253 option generic_events.250.a"
		name = generic_events.250.a
		event_target:marked_country = {
			set_faction_leader = yes
		}
		add_to_variable = { ROOT.update_stt_gui = 1 }
	}
	option = {
		log = "[GetLogInfo]: event generic_events.253 option generic_events.250.c"
		name = generic_events.250.c
	}
}

# Leave Faction
country_event = {
	id = generic_events.254
	title = generic_events.254.t
	desc = generic_events.254.d

	is_triggered_only = yes

	option = {
		log = "[GetLogInfo]: event generic_events.254 option generic_events.250.a"
		name = generic_events.250.a
		event_target:marked_country = {
			if = {
				limit = { is_faction_leader = yes }
				dismantle_faction = yes
			}
			else_if = {
				limit = { is_in_faction = yes }
				leave_faction = yes
			}
		}
		add_to_variable = { ROOT.update_stt_gui = 1 }
	}
	option = {
		log = "[GetLogInfo]: event generic_events.254 option generic_events.250.c"
		name = generic_events.250.c
	}
}

# Peace
country_event = {
	id = generic_events.255
	title = generic_events.255.t
	desc = generic_events.255.d

	is_triggered_only = yes

	immediate = {
		hidden_effect = {
			event_target:marked_country = { save_event_target_as = white_peace_receiver }
		}
	}

	option = {
		log = "[GetLogInfo]: event generic_events.255 option generic_events.250.a"
		name = generic_events.250.a
		event_target:peace_target = { white_peace_with_TARGET = yes }
		add_to_variable = { ROOT.update_stt_gui = 1 }
		clear_global_event_target = peace_target
	}
	option = {
		log = "[GetLogInfo]: event generic_events.255 option generic_events.255.b"
		name = generic_events.255.b
		trigger = {
			event_target:marked_country = {
				OR = {
					is_subject = yes
					is_in_faction = yes
				}
			}
		}
		event_target:marked_country = {
			if = {
				limit = { is_subject = yes }
				overlord = {
					set_autonomy = {
						target = event_target:marked_country
						autonomy_state = autonomy_free
					}
				}
			}
			if = {
				limit = { is_faction_leader = yes }
				dismantle_faction = yes
			}
			else_if = {
				limit = { is_in_faction = yes }
				leave_faction = yes
			}
		}
		event_target:peace_target = { white_peace_with_TARGET = yes }
		add_to_variable = { ROOT.update_stt_gui = 1 }
		clear_global_event_target = peace_target
	}
	option = {
		log = "[GetLogInfo]: event generic_events.255 option generic_events.250.c"
		name = generic_events.250.c
		clear_global_event_target = peace_target
	}
}

# Peace Out Everyone
country_event = {
	id = generic_events.256
	title = generic_events.256.t
	desc = generic_events.256.d

	is_triggered_only = yes

	option = {
		log = "[GetLogInfo]: event generic_events.256 option generic_events.250.a"
		name = generic_events.250.a
		event_target:marked_country = {
			if = {
				limit = { is_subject = yes }
				overlord = {
					set_autonomy = {
						target = event_target:marked_country
						autonomy_state = autonomy_free
					}
				}
			}
			if = {
				limit = { is_faction_leader = yes }
				dismantle_faction = yes
			}
			else_if = {
				limit = { is_in_faction = yes }
				leave_faction = yes
			}
			separate_peace_all_wars = yes
		}
		add_to_variable = { ROOT.update_stt_gui = 1 }
	}
	option = {
		log = "[GetLogInfo]: event generic_events.256 option generic_events.250.c"
		name = generic_events.250.c
	}
}

# Declare War
country_event = {
	id = generic_events.257
	title = generic_events.257.t
	desc = generic_events.257.d

	is_triggered_only = yes

	option = {
		log = "[GetLogInfo]: event generic_events.257 option generic_events.250.a"
		name = generic_events.250.a
		event_target:marked_country = {
			declare_war_on = {
				target = event_target:war_target
				type = annex_everything
			}
			hidden_effect = {
				every_country = {
					limit = {
						is_ally_with = event_target:marked_country
						NOT = {
							tag = event_target:marked_country
							has_war_with = event_target:war_target
						}
					}
					meta_effect = {
						text = {
							add_to_war = {
								targeted_alliance = [ALLY]
								enemy = [ENEMY]
							}
						}
						ALLY = "[marked_country.GetTag]"
						ENEMY = "[war_target.GetTag]"
					}
				}
			}
		}
		clear_global_event_target = war_target
		add_to_variable = { ROOT.update_stt_gui = 1 }
	}
	option = {
		log = "[GetLogInfo]: event generic_events.257 option generic_events.250.c"
		name = generic_events.250.c
		clear_global_event_target = war_target
	}
}

